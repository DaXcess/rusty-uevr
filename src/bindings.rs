/* automatically generated by rust-bindgen 0.70.1 */

pub const UEVR_PLUGIN_VERSION_MAJOR: u32 = 2;
pub const UEVR_PLUGIN_VERSION_MINOR: u32 = 34;
pub const UEVR_PLUGIN_VERSION_PATCH: u32 = 0;
pub const UEVR_RENDERER_D3D11: u32 = 0;
pub const UEVR_RENDERER_D3D12: u32 = 1;
pub const UEVR_LEFT_EYE: u32 = 0;
pub const UEVR_RIGHT_EYE: u32 = 1;
pub const UEVR_OPENXR_SWAPCHAIN_LEFT_EYE: u32 = 0;
pub const UEVR_OPENXR_SWAPCHAIN_RIGHT_EYE: u32 = 1;
pub const UEVR_OPENXR_SWAPCHAIN_UI: u32 = 2;
pub type wchar_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_PluginVersion {
    pub major: ::std::os::raw::c_int,
    pub minor: ::std::os::raw::c_int,
    pub patch: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_PluginVersion"][::std::mem::size_of::<UEVR_PluginVersion>() - 12usize];
    ["Alignment of UEVR_PluginVersion"][::std::mem::align_of::<UEVR_PluginVersion>() - 4usize];
    ["Offset of field: UEVR_PluginVersion::major"]
        [::std::mem::offset_of!(UEVR_PluginVersion, major) - 0usize];
    ["Offset of field: UEVR_PluginVersion::minor"]
        [::std::mem::offset_of!(UEVR_PluginVersion, minor) - 4usize];
    ["Offset of field: UEVR_PluginVersion::patch"]
        [::std::mem::offset_of!(UEVR_PluginVersion, patch) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_UGameEngineHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_UGameEngineHandle__"]
        [::std::mem::size_of::<UEVR_UGameEngineHandle__>() - 4usize];
    ["Alignment of UEVR_UGameEngineHandle__"]
        [::std::mem::align_of::<UEVR_UGameEngineHandle__>() - 4usize];
    ["Offset of field: UEVR_UGameEngineHandle__::unused"]
        [::std::mem::offset_of!(UEVR_UGameEngineHandle__, unused) - 0usize];
};
pub type UEVR_UGameEngineHandle = *mut UEVR_UGameEngineHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_UEngineHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_UEngineHandle__"][::std::mem::size_of::<UEVR_UEngineHandle__>() - 4usize];
    ["Alignment of UEVR_UEngineHandle__"][::std::mem::align_of::<UEVR_UEngineHandle__>() - 4usize];
    ["Offset of field: UEVR_UEngineHandle__::unused"]
        [::std::mem::offset_of!(UEVR_UEngineHandle__, unused) - 0usize];
};
pub type UEVR_UEngineHandle = *mut UEVR_UEngineHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FSlateRHIRendererHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FSlateRHIRendererHandle__"]
        [::std::mem::size_of::<UEVR_FSlateRHIRendererHandle__>() - 4usize];
    ["Alignment of UEVR_FSlateRHIRendererHandle__"]
        [::std::mem::align_of::<UEVR_FSlateRHIRendererHandle__>() - 4usize];
    ["Offset of field: UEVR_FSlateRHIRendererHandle__::unused"]
        [::std::mem::offset_of!(UEVR_FSlateRHIRendererHandle__, unused) - 0usize];
};
pub type UEVR_FSlateRHIRendererHandle = *mut UEVR_FSlateRHIRendererHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FViewportInfoHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FViewportInfoHandle__"]
        [::std::mem::size_of::<UEVR_FViewportInfoHandle__>() - 4usize];
    ["Alignment of UEVR_FViewportInfoHandle__"]
        [::std::mem::align_of::<UEVR_FViewportInfoHandle__>() - 4usize];
    ["Offset of field: UEVR_FViewportInfoHandle__::unused"]
        [::std::mem::offset_of!(UEVR_FViewportInfoHandle__, unused) - 0usize];
};
pub type UEVR_FViewportInfoHandle = *mut UEVR_FViewportInfoHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_UGameViewportClientHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_UGameViewportClientHandle__"]
        [::std::mem::size_of::<UEVR_UGameViewportClientHandle__>() - 4usize];
    ["Alignment of UEVR_UGameViewportClientHandle__"]
        [::std::mem::align_of::<UEVR_UGameViewportClientHandle__>() - 4usize];
    ["Offset of field: UEVR_UGameViewportClientHandle__::unused"]
        [::std::mem::offset_of!(UEVR_UGameViewportClientHandle__, unused) - 0usize];
};
pub type UEVR_UGameViewportClientHandle = *mut UEVR_UGameViewportClientHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FViewportHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FViewportHandle__"][::std::mem::size_of::<UEVR_FViewportHandle__>() - 4usize];
    ["Alignment of UEVR_FViewportHandle__"]
        [::std::mem::align_of::<UEVR_FViewportHandle__>() - 4usize];
    ["Offset of field: UEVR_FViewportHandle__::unused"]
        [::std::mem::offset_of!(UEVR_FViewportHandle__, unused) - 0usize];
};
pub type UEVR_FViewportHandle = *mut UEVR_FViewportHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FCanvasHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FCanvasHandle__"][::std::mem::size_of::<UEVR_FCanvasHandle__>() - 4usize];
    ["Alignment of UEVR_FCanvasHandle__"][::std::mem::align_of::<UEVR_FCanvasHandle__>() - 4usize];
    ["Offset of field: UEVR_FCanvasHandle__::unused"]
        [::std::mem::offset_of!(UEVR_FCanvasHandle__, unused) - 0usize];
};
pub type UEVR_FCanvasHandle = *mut UEVR_FCanvasHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_UObjectArrayHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_UObjectArrayHandle__"]
        [::std::mem::size_of::<UEVR_UObjectArrayHandle__>() - 4usize];
    ["Alignment of UEVR_UObjectArrayHandle__"]
        [::std::mem::align_of::<UEVR_UObjectArrayHandle__>() - 4usize];
    ["Offset of field: UEVR_UObjectArrayHandle__::unused"]
        [::std::mem::offset_of!(UEVR_UObjectArrayHandle__, unused) - 0usize];
};
pub type UEVR_UObjectArrayHandle = *mut UEVR_UObjectArrayHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_UObjectHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_UObjectHandle__"][::std::mem::size_of::<UEVR_UObjectHandle__>() - 4usize];
    ["Alignment of UEVR_UObjectHandle__"][::std::mem::align_of::<UEVR_UObjectHandle__>() - 4usize];
    ["Offset of field: UEVR_UObjectHandle__::unused"]
        [::std::mem::offset_of!(UEVR_UObjectHandle__, unused) - 0usize];
};
pub type UEVR_UObjectHandle = *mut UEVR_UObjectHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FFieldHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FFieldHandle__"][::std::mem::size_of::<UEVR_FFieldHandle__>() - 4usize];
    ["Alignment of UEVR_FFieldHandle__"][::std::mem::align_of::<UEVR_FFieldHandle__>() - 4usize];
    ["Offset of field: UEVR_FFieldHandle__::unused"]
        [::std::mem::offset_of!(UEVR_FFieldHandle__, unused) - 0usize];
};
pub type UEVR_FFieldHandle = *mut UEVR_FFieldHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_UFieldHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_UFieldHandle__"][::std::mem::size_of::<UEVR_UFieldHandle__>() - 4usize];
    ["Alignment of UEVR_UFieldHandle__"][::std::mem::align_of::<UEVR_UFieldHandle__>() - 4usize];
    ["Offset of field: UEVR_UFieldHandle__::unused"]
        [::std::mem::offset_of!(UEVR_UFieldHandle__, unused) - 0usize];
};
pub type UEVR_UFieldHandle = *mut UEVR_UFieldHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FPropertyHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FPropertyHandle__"][::std::mem::size_of::<UEVR_FPropertyHandle__>() - 4usize];
    ["Alignment of UEVR_FPropertyHandle__"]
        [::std::mem::align_of::<UEVR_FPropertyHandle__>() - 4usize];
    ["Offset of field: UEVR_FPropertyHandle__::unused"]
        [::std::mem::offset_of!(UEVR_FPropertyHandle__, unused) - 0usize];
};
pub type UEVR_FPropertyHandle = *mut UEVR_FPropertyHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_UStructHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_UStructHandle__"][::std::mem::size_of::<UEVR_UStructHandle__>() - 4usize];
    ["Alignment of UEVR_UStructHandle__"][::std::mem::align_of::<UEVR_UStructHandle__>() - 4usize];
    ["Offset of field: UEVR_UStructHandle__::unused"]
        [::std::mem::offset_of!(UEVR_UStructHandle__, unused) - 0usize];
};
pub type UEVR_UStructHandle = *mut UEVR_UStructHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_UClassHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_UClassHandle__"][::std::mem::size_of::<UEVR_UClassHandle__>() - 4usize];
    ["Alignment of UEVR_UClassHandle__"][::std::mem::align_of::<UEVR_UClassHandle__>() - 4usize];
    ["Offset of field: UEVR_UClassHandle__::unused"]
        [::std::mem::offset_of!(UEVR_UClassHandle__, unused) - 0usize];
};
pub type UEVR_UClassHandle = *mut UEVR_UClassHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_UFunctionHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_UFunctionHandle__"][::std::mem::size_of::<UEVR_UFunctionHandle__>() - 4usize];
    ["Alignment of UEVR_UFunctionHandle__"]
        [::std::mem::align_of::<UEVR_UFunctionHandle__>() - 4usize];
    ["Offset of field: UEVR_UFunctionHandle__::unused"]
        [::std::mem::offset_of!(UEVR_UFunctionHandle__, unused) - 0usize];
};
pub type UEVR_UFunctionHandle = *mut UEVR_UFunctionHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FNameHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FNameHandle__"][::std::mem::size_of::<UEVR_FNameHandle__>() - 4usize];
    ["Alignment of UEVR_FNameHandle__"][::std::mem::align_of::<UEVR_FNameHandle__>() - 4usize];
    ["Offset of field: UEVR_FNameHandle__::unused"]
        [::std::mem::offset_of!(UEVR_FNameHandle__, unused) - 0usize];
};
pub type UEVR_FNameHandle = *mut UEVR_FNameHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FFieldClassHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FFieldClassHandle__"]
        [::std::mem::size_of::<UEVR_FFieldClassHandle__>() - 4usize];
    ["Alignment of UEVR_FFieldClassHandle__"]
        [::std::mem::align_of::<UEVR_FFieldClassHandle__>() - 4usize];
    ["Offset of field: UEVR_FFieldClassHandle__::unused"]
        [::std::mem::offset_of!(UEVR_FFieldClassHandle__, unused) - 0usize];
};
pub type UEVR_FFieldClassHandle = *mut UEVR_FFieldClassHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FConsoleManagerHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FConsoleManagerHandle__"]
        [::std::mem::size_of::<UEVR_FConsoleManagerHandle__>() - 4usize];
    ["Alignment of UEVR_FConsoleManagerHandle__"]
        [::std::mem::align_of::<UEVR_FConsoleManagerHandle__>() - 4usize];
    ["Offset of field: UEVR_FConsoleManagerHandle__::unused"]
        [::std::mem::offset_of!(UEVR_FConsoleManagerHandle__, unused) - 0usize];
};
pub type UEVR_FConsoleManagerHandle = *mut UEVR_FConsoleManagerHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_IConsoleObjectHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_IConsoleObjectHandle__"]
        [::std::mem::size_of::<UEVR_IConsoleObjectHandle__>() - 4usize];
    ["Alignment of UEVR_IConsoleObjectHandle__"]
        [::std::mem::align_of::<UEVR_IConsoleObjectHandle__>() - 4usize];
    ["Offset of field: UEVR_IConsoleObjectHandle__::unused"]
        [::std::mem::offset_of!(UEVR_IConsoleObjectHandle__, unused) - 0usize];
};
pub type UEVR_IConsoleObjectHandle = *mut UEVR_IConsoleObjectHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_IConsoleCommandHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_IConsoleCommandHandle__"]
        [::std::mem::size_of::<UEVR_IConsoleCommandHandle__>() - 4usize];
    ["Alignment of UEVR_IConsoleCommandHandle__"]
        [::std::mem::align_of::<UEVR_IConsoleCommandHandle__>() - 4usize];
    ["Offset of field: UEVR_IConsoleCommandHandle__::unused"]
        [::std::mem::offset_of!(UEVR_IConsoleCommandHandle__, unused) - 0usize];
};
pub type UEVR_IConsoleCommandHandle = *mut UEVR_IConsoleCommandHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_IConsoleVariableHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_IConsoleVariableHandle__"]
        [::std::mem::size_of::<UEVR_IConsoleVariableHandle__>() - 4usize];
    ["Alignment of UEVR_IConsoleVariableHandle__"]
        [::std::mem::align_of::<UEVR_IConsoleVariableHandle__>() - 4usize];
    ["Offset of field: UEVR_IConsoleVariableHandle__::unused"]
        [::std::mem::offset_of!(UEVR_IConsoleVariableHandle__, unused) - 0usize];
};
pub type UEVR_IConsoleVariableHandle = *mut UEVR_IConsoleVariableHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_TArrayHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_TArrayHandle__"][::std::mem::size_of::<UEVR_TArrayHandle__>() - 4usize];
    ["Alignment of UEVR_TArrayHandle__"][::std::mem::align_of::<UEVR_TArrayHandle__>() - 4usize];
    ["Offset of field: UEVR_TArrayHandle__::unused"]
        [::std::mem::offset_of!(UEVR_TArrayHandle__, unused) - 0usize];
};
pub type UEVR_TArrayHandle = *mut UEVR_TArrayHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FMallocHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FMallocHandle__"][::std::mem::size_of::<UEVR_FMallocHandle__>() - 4usize];
    ["Alignment of UEVR_FMallocHandle__"][::std::mem::align_of::<UEVR_FMallocHandle__>() - 4usize];
    ["Offset of field: UEVR_FMallocHandle__::unused"]
        [::std::mem::offset_of!(UEVR_FMallocHandle__, unused) - 0usize];
};
pub type UEVR_FMallocHandle = *mut UEVR_FMallocHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FRHITexture2DHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FRHITexture2DHandle__"]
        [::std::mem::size_of::<UEVR_FRHITexture2DHandle__>() - 4usize];
    ["Alignment of UEVR_FRHITexture2DHandle__"]
        [::std::mem::align_of::<UEVR_FRHITexture2DHandle__>() - 4usize];
    ["Offset of field: UEVR_FRHITexture2DHandle__::unused"]
        [::std::mem::offset_of!(UEVR_FRHITexture2DHandle__, unused) - 0usize];
};
pub type UEVR_FRHITexture2DHandle = *mut UEVR_FRHITexture2DHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_UScriptStructHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_UScriptStructHandle__"]
        [::std::mem::size_of::<UEVR_UScriptStructHandle__>() - 4usize];
    ["Alignment of UEVR_UScriptStructHandle__"]
        [::std::mem::align_of::<UEVR_UScriptStructHandle__>() - 4usize];
    ["Offset of field: UEVR_UScriptStructHandle__::unused"]
        [::std::mem::offset_of!(UEVR_UScriptStructHandle__, unused) - 0usize];
};
pub type UEVR_UScriptStructHandle = *mut UEVR_UScriptStructHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FArrayPropertyHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FArrayPropertyHandle__"]
        [::std::mem::size_of::<UEVR_FArrayPropertyHandle__>() - 4usize];
    ["Alignment of UEVR_FArrayPropertyHandle__"]
        [::std::mem::align_of::<UEVR_FArrayPropertyHandle__>() - 4usize];
    ["Offset of field: UEVR_FArrayPropertyHandle__::unused"]
        [::std::mem::offset_of!(UEVR_FArrayPropertyHandle__, unused) - 0usize];
};
pub type UEVR_FArrayPropertyHandle = *mut UEVR_FArrayPropertyHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FBoolPropertyHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FBoolPropertyHandle__"]
        [::std::mem::size_of::<UEVR_FBoolPropertyHandle__>() - 4usize];
    ["Alignment of UEVR_FBoolPropertyHandle__"]
        [::std::mem::align_of::<UEVR_FBoolPropertyHandle__>() - 4usize];
    ["Offset of field: UEVR_FBoolPropertyHandle__::unused"]
        [::std::mem::offset_of!(UEVR_FBoolPropertyHandle__, unused) - 0usize];
};
pub type UEVR_FBoolPropertyHandle = *mut UEVR_FBoolPropertyHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FStructPropertyHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FStructPropertyHandle__"]
        [::std::mem::size_of::<UEVR_FStructPropertyHandle__>() - 4usize];
    ["Alignment of UEVR_FStructPropertyHandle__"]
        [::std::mem::align_of::<UEVR_FStructPropertyHandle__>() - 4usize];
    ["Offset of field: UEVR_FStructPropertyHandle__::unused"]
        [::std::mem::offset_of!(UEVR_FStructPropertyHandle__, unused) - 0usize];
};
pub type UEVR_FStructPropertyHandle = *mut UEVR_FStructPropertyHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FEnumPropertyHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FEnumPropertyHandle__"]
        [::std::mem::size_of::<UEVR_FEnumPropertyHandle__>() - 4usize];
    ["Alignment of UEVR_FEnumPropertyHandle__"]
        [::std::mem::align_of::<UEVR_FEnumPropertyHandle__>() - 4usize];
    ["Offset of field: UEVR_FEnumPropertyHandle__::unused"]
        [::std::mem::offset_of!(UEVR_FEnumPropertyHandle__, unused) - 0usize];
};
pub type UEVR_FEnumPropertyHandle = *mut UEVR_FEnumPropertyHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_UEnumHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_UEnumHandle__"][::std::mem::size_of::<UEVR_UEnumHandle__>() - 4usize];
    ["Alignment of UEVR_UEnumHandle__"][::std::mem::align_of::<UEVR_UEnumHandle__>() - 4usize];
    ["Offset of field: UEVR_UEnumHandle__::unused"]
        [::std::mem::offset_of!(UEVR_UEnumHandle__, unused) - 0usize];
};
pub type UEVR_UEnumHandle = *mut UEVR_UEnumHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FNumericPropertyHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FNumericPropertyHandle__"]
        [::std::mem::size_of::<UEVR_FNumericPropertyHandle__>() - 4usize];
    ["Alignment of UEVR_FNumericPropertyHandle__"]
        [::std::mem::align_of::<UEVR_FNumericPropertyHandle__>() - 4usize];
    ["Offset of field: UEVR_FNumericPropertyHandle__::unused"]
        [::std::mem::offset_of!(UEVR_FNumericPropertyHandle__, unused) - 0usize];
};
pub type UEVR_FNumericPropertyHandle = *mut UEVR_FNumericPropertyHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_XrInstance__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_XrInstance__"][::std::mem::size_of::<UEVR_XrInstance__>() - 4usize];
    ["Alignment of UEVR_XrInstance__"][::std::mem::align_of::<UEVR_XrInstance__>() - 4usize];
    ["Offset of field: UEVR_XrInstance__::unused"]
        [::std::mem::offset_of!(UEVR_XrInstance__, unused) - 0usize];
};
pub type UEVR_XrInstance = *mut UEVR_XrInstance__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_XrSession__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_XrSession__"][::std::mem::size_of::<UEVR_XrSession__>() - 4usize];
    ["Alignment of UEVR_XrSession__"][::std::mem::align_of::<UEVR_XrSession__>() - 4usize];
    ["Offset of field: UEVR_XrSession__::unused"]
        [::std::mem::offset_of!(UEVR_XrSession__, unused) - 0usize];
};
pub type UEVR_XrSession = *mut UEVR_XrSession__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_XrSpace__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_XrSpace__"][::std::mem::size_of::<UEVR_XrSpace__>() - 4usize];
    ["Alignment of UEVR_XrSpace__"][::std::mem::align_of::<UEVR_XrSpace__>() - 4usize];
    ["Offset of field: UEVR_XrSpace__::unused"]
        [::std::mem::offset_of!(UEVR_XrSpace__, unused) - 0usize];
};
pub type UEVR_XrSpace = *mut UEVR_XrSpace__;
pub type UEVR_Eye = ::std::os::raw::c_int;
pub type UEVR_TrackedDeviceIndex = ::std::os::raw::c_int;
pub type UEVR_OpenXRSwapchainIndex = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_Vector2f {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_Vector2f"][::std::mem::size_of::<UEVR_Vector2f>() - 8usize];
    ["Alignment of UEVR_Vector2f"][::std::mem::align_of::<UEVR_Vector2f>() - 4usize];
    ["Offset of field: UEVR_Vector2f::x"][::std::mem::offset_of!(UEVR_Vector2f, x) - 0usize];
    ["Offset of field: UEVR_Vector2f::y"][::std::mem::offset_of!(UEVR_Vector2f, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_Vector3f {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_Vector3f"][::std::mem::size_of::<UEVR_Vector3f>() - 12usize];
    ["Alignment of UEVR_Vector3f"][::std::mem::align_of::<UEVR_Vector3f>() - 4usize];
    ["Offset of field: UEVR_Vector3f::x"][::std::mem::offset_of!(UEVR_Vector3f, x) - 0usize];
    ["Offset of field: UEVR_Vector3f::y"][::std::mem::offset_of!(UEVR_Vector3f, y) - 4usize];
    ["Offset of field: UEVR_Vector3f::z"][::std::mem::offset_of!(UEVR_Vector3f, z) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_Vector3d {
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_Vector3d"][::std::mem::size_of::<UEVR_Vector3d>() - 24usize];
    ["Alignment of UEVR_Vector3d"][::std::mem::align_of::<UEVR_Vector3d>() - 8usize];
    ["Offset of field: UEVR_Vector3d::x"][::std::mem::offset_of!(UEVR_Vector3d, x) - 0usize];
    ["Offset of field: UEVR_Vector3d::y"][::std::mem::offset_of!(UEVR_Vector3d, y) - 8usize];
    ["Offset of field: UEVR_Vector3d::z"][::std::mem::offset_of!(UEVR_Vector3d, z) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_Vector4f {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_Vector4f"][::std::mem::size_of::<UEVR_Vector4f>() - 16usize];
    ["Alignment of UEVR_Vector4f"][::std::mem::align_of::<UEVR_Vector4f>() - 4usize];
    ["Offset of field: UEVR_Vector4f::x"][::std::mem::offset_of!(UEVR_Vector4f, x) - 0usize];
    ["Offset of field: UEVR_Vector4f::y"][::std::mem::offset_of!(UEVR_Vector4f, y) - 4usize];
    ["Offset of field: UEVR_Vector4f::z"][::std::mem::offset_of!(UEVR_Vector4f, z) - 8usize];
    ["Offset of field: UEVR_Vector4f::w"][::std::mem::offset_of!(UEVR_Vector4f, w) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_Quaternionf {
    pub w: f32,
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_Quaternionf"][::std::mem::size_of::<UEVR_Quaternionf>() - 16usize];
    ["Alignment of UEVR_Quaternionf"][::std::mem::align_of::<UEVR_Quaternionf>() - 4usize];
    ["Offset of field: UEVR_Quaternionf::w"][::std::mem::offset_of!(UEVR_Quaternionf, w) - 0usize];
    ["Offset of field: UEVR_Quaternionf::x"][::std::mem::offset_of!(UEVR_Quaternionf, x) - 4usize];
    ["Offset of field: UEVR_Quaternionf::y"][::std::mem::offset_of!(UEVR_Quaternionf, y) - 8usize];
    ["Offset of field: UEVR_Quaternionf::z"][::std::mem::offset_of!(UEVR_Quaternionf, z) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_Rotatorf {
    pub pitch: f32,
    pub yaw: f32,
    pub roll: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_Rotatorf"][::std::mem::size_of::<UEVR_Rotatorf>() - 12usize];
    ["Alignment of UEVR_Rotatorf"][::std::mem::align_of::<UEVR_Rotatorf>() - 4usize];
    ["Offset of field: UEVR_Rotatorf::pitch"]
        [::std::mem::offset_of!(UEVR_Rotatorf, pitch) - 0usize];
    ["Offset of field: UEVR_Rotatorf::yaw"][::std::mem::offset_of!(UEVR_Rotatorf, yaw) - 4usize];
    ["Offset of field: UEVR_Rotatorf::roll"][::std::mem::offset_of!(UEVR_Rotatorf, roll) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_Rotatord {
    pub pitch: f64,
    pub yaw: f64,
    pub roll: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_Rotatord"][::std::mem::size_of::<UEVR_Rotatord>() - 24usize];
    ["Alignment of UEVR_Rotatord"][::std::mem::align_of::<UEVR_Rotatord>() - 8usize];
    ["Offset of field: UEVR_Rotatord::pitch"]
        [::std::mem::offset_of!(UEVR_Rotatord, pitch) - 0usize];
    ["Offset of field: UEVR_Rotatord::yaw"][::std::mem::offset_of!(UEVR_Rotatord, yaw) - 8usize];
    ["Offset of field: UEVR_Rotatord::roll"][::std::mem::offset_of!(UEVR_Rotatord, roll) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_Matrix4x4f {
    pub m: [[f32; 4usize]; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_Matrix4x4f"][::std::mem::size_of::<UEVR_Matrix4x4f>() - 64usize];
    ["Alignment of UEVR_Matrix4x4f"][::std::mem::align_of::<UEVR_Matrix4x4f>() - 4usize];
    ["Offset of field: UEVR_Matrix4x4f::m"][::std::mem::offset_of!(UEVR_Matrix4x4f, m) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_Matrix4x4d {
    pub m: [[f64; 4usize]; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_Matrix4x4d"][::std::mem::size_of::<UEVR_Matrix4x4d>() - 128usize];
    ["Alignment of UEVR_Matrix4x4d"][::std::mem::align_of::<UEVR_Matrix4x4d>() - 8usize];
    ["Offset of field: UEVR_Matrix4x4d::m"][::std::mem::offset_of!(UEVR_Matrix4x4d, m) - 0usize];
};
pub type UEVR_OnPresentCb = ::std::option::Option<unsafe extern "C" fn()>;
pub type UEVR_OnDeviceResetCb = ::std::option::Option<unsafe extern "C" fn()>;
pub type UEVR_OnPostRenderVRFrameworkDX11Cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ),
>;
pub type UEVR_OnPostRenderVRFrameworkDX12Cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ),
>;
pub type UEVR_OnMessageCb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_ulonglong,
        arg4: ::std::os::raw::c_longlong,
    ) -> bool,
>;
pub type UEVR_OnXInputGetStateCb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_void,
    ),
>;
pub type UEVR_OnXInputSetStateCb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_void,
    ),
>;
pub type UEVR_Engine_TickCb =
    ::std::option::Option<unsafe extern "C" fn(engine: UEVR_UGameEngineHandle, delta_seconds: f32)>;
pub type UEVR_Slate_DrawWindow_RenderThreadCb = ::std::option::Option<
    unsafe extern "C" fn(
        renderer: UEVR_FSlateRHIRendererHandle,
        viewport_info: UEVR_FViewportInfoHandle,
    ),
>;
pub type UEVR_ViewportClient_DrawCb = ::std::option::Option<
    unsafe extern "C" fn(
        viewport_client: UEVR_UGameViewportClientHandle,
        viewport: UEVR_FViewportHandle,
        canvas: UEVR_FCanvasHandle,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_StereoRenderingDeviceHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_StereoRenderingDeviceHandle__"]
        [::std::mem::size_of::<UEVR_StereoRenderingDeviceHandle__>() - 4usize];
    ["Alignment of UEVR_StereoRenderingDeviceHandle__"]
        [::std::mem::align_of::<UEVR_StereoRenderingDeviceHandle__>() - 4usize];
    ["Offset of field: UEVR_StereoRenderingDeviceHandle__::unused"]
        [::std::mem::offset_of!(UEVR_StereoRenderingDeviceHandle__, unused) - 0usize];
};
pub type UEVR_StereoRenderingDeviceHandle = *mut UEVR_StereoRenderingDeviceHandle__;
pub type UEVR_Stereo_CalculateStereoViewOffsetCb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: UEVR_StereoRenderingDeviceHandle,
        view_index: ::std::os::raw::c_int,
        world_to_meters: f32,
        position: *mut UEVR_Vector3f,
        rotation: *mut UEVR_Rotatorf,
        is_double: bool,
    ),
>;
pub type UEVR_OnPresentFn =
    ::std::option::Option<unsafe extern "C" fn(arg1: UEVR_OnPresentCb) -> bool>;
pub type UEVR_OnDeviceResetFn =
    ::std::option::Option<unsafe extern "C" fn(arg1: UEVR_OnDeviceResetCb) -> bool>;
pub type UEVR_OnPostRenderVRFrameworkDX11Fn =
    ::std::option::Option<unsafe extern "C" fn(arg1: UEVR_OnPostRenderVRFrameworkDX11Cb) -> bool>;
pub type UEVR_OnPostRenderVRFrameworkDX12Fn =
    ::std::option::Option<unsafe extern "C" fn(arg1: UEVR_OnPostRenderVRFrameworkDX12Cb) -> bool>;
pub type UEVR_OnMessageFn =
    ::std::option::Option<unsafe extern "C" fn(arg1: UEVR_OnMessageCb) -> bool>;
pub type UEVR_OnXInputGetStateFn =
    ::std::option::Option<unsafe extern "C" fn(arg1: UEVR_OnXInputGetStateCb) -> bool>;
pub type UEVR_OnXInputSetStateFn =
    ::std::option::Option<unsafe extern "C" fn(arg1: UEVR_OnXInputSetStateCb) -> bool>;
pub type UEVR_Engine_TickFn =
    ::std::option::Option<unsafe extern "C" fn(arg1: UEVR_Engine_TickCb) -> bool>;
pub type UEVR_Slate_DrawWindow_RenderThreadFn =
    ::std::option::Option<unsafe extern "C" fn(arg1: UEVR_Slate_DrawWindow_RenderThreadCb) -> bool>;
pub type UEVR_Stereo_CalculateStereoViewOffsetFn = ::std::option::Option<
    unsafe extern "C" fn(arg1: UEVR_Stereo_CalculateStereoViewOffsetCb) -> bool,
>;
pub type UEVR_ViewportClient_DrawFn =
    ::std::option::Option<unsafe extern "C" fn(arg1: UEVR_ViewportClient_DrawCb) -> bool>;
pub type UEVR_UFunction_NativeFn = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: UEVR_UObjectHandle,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
pub type UEVR_UFunction_NativePreFn = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: UEVR_UFunctionHandle,
        arg2: UEVR_UObjectHandle,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
pub type UEVR_UFunction_NativePostFn = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: UEVR_UFunctionHandle,
        arg2: UEVR_UObjectHandle,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
pub type UEVR_PluginRequiredVersionFn =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut UEVR_PluginVersion)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_PluginCallbacks {
    pub on_present: UEVR_OnPresentFn,
    pub on_device_reset: UEVR_OnDeviceResetFn,
    pub on_message: UEVR_OnMessageFn,
    pub on_xinput_get_state: UEVR_OnXInputGetStateFn,
    pub on_xinput_set_state: UEVR_OnXInputSetStateFn,
    pub on_post_render_vr_framework_dx11: UEVR_OnPostRenderVRFrameworkDX11Fn,
    pub on_post_render_vr_framework_dx12: UEVR_OnPostRenderVRFrameworkDX12Fn,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_PluginCallbacks"][::std::mem::size_of::<UEVR_PluginCallbacks>() - 56usize];
    ["Alignment of UEVR_PluginCallbacks"][::std::mem::align_of::<UEVR_PluginCallbacks>() - 8usize];
    ["Offset of field: UEVR_PluginCallbacks::on_present"]
        [::std::mem::offset_of!(UEVR_PluginCallbacks, on_present) - 0usize];
    ["Offset of field: UEVR_PluginCallbacks::on_device_reset"]
        [::std::mem::offset_of!(UEVR_PluginCallbacks, on_device_reset) - 8usize];
    ["Offset of field: UEVR_PluginCallbacks::on_message"]
        [::std::mem::offset_of!(UEVR_PluginCallbacks, on_message) - 16usize];
    ["Offset of field: UEVR_PluginCallbacks::on_xinput_get_state"]
        [::std::mem::offset_of!(UEVR_PluginCallbacks, on_xinput_get_state) - 24usize];
    ["Offset of field: UEVR_PluginCallbacks::on_xinput_set_state"]
        [::std::mem::offset_of!(UEVR_PluginCallbacks, on_xinput_set_state) - 32usize];
    ["Offset of field: UEVR_PluginCallbacks::on_post_render_vr_framework_dx11"]
        [::std::mem::offset_of!(UEVR_PluginCallbacks, on_post_render_vr_framework_dx11) - 40usize];
    ["Offset of field: UEVR_PluginCallbacks::on_post_render_vr_framework_dx12"]
        [::std::mem::offset_of!(UEVR_PluginCallbacks, on_post_render_vr_framework_dx12) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_PluginFunctions {
    pub log_error:
        ::std::option::Option<unsafe extern "C" fn(format: *const ::std::os::raw::c_char, ...)>,
    pub log_warn:
        ::std::option::Option<unsafe extern "C" fn(format: *const ::std::os::raw::c_char, ...)>,
    pub log_info:
        ::std::option::Option<unsafe extern "C" fn(format: *const ::std::os::raw::c_char, ...)>,
    pub is_drawing_ui: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub remove_callback:
        ::std::option::Option<unsafe extern "C" fn(cb: *mut ::std::os::raw::c_void) -> bool>,
    pub get_persistent_dir: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut wchar_t,
            buffer_size: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_uint,
    >,
    pub register_inline_hook: ::std::option::Option<
        unsafe extern "C" fn(
            target: *mut ::std::os::raw::c_void,
            dst: *mut ::std::os::raw::c_void,
            original: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub unregister_inline_hook:
        ::std::option::Option<unsafe extern "C" fn(hook_id: ::std::os::raw::c_int)>,
    pub dispatch_lua_event: ::std::option::Option<
        unsafe extern "C" fn(
            event_name: *const ::std::os::raw::c_char,
            event_data: *const ::std::os::raw::c_char,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_PluginFunctions"][::std::mem::size_of::<UEVR_PluginFunctions>() - 72usize];
    ["Alignment of UEVR_PluginFunctions"][::std::mem::align_of::<UEVR_PluginFunctions>() - 8usize];
    ["Offset of field: UEVR_PluginFunctions::log_error"]
        [::std::mem::offset_of!(UEVR_PluginFunctions, log_error) - 0usize];
    ["Offset of field: UEVR_PluginFunctions::log_warn"]
        [::std::mem::offset_of!(UEVR_PluginFunctions, log_warn) - 8usize];
    ["Offset of field: UEVR_PluginFunctions::log_info"]
        [::std::mem::offset_of!(UEVR_PluginFunctions, log_info) - 16usize];
    ["Offset of field: UEVR_PluginFunctions::is_drawing_ui"]
        [::std::mem::offset_of!(UEVR_PluginFunctions, is_drawing_ui) - 24usize];
    ["Offset of field: UEVR_PluginFunctions::remove_callback"]
        [::std::mem::offset_of!(UEVR_PluginFunctions, remove_callback) - 32usize];
    ["Offset of field: UEVR_PluginFunctions::get_persistent_dir"]
        [::std::mem::offset_of!(UEVR_PluginFunctions, get_persistent_dir) - 40usize];
    ["Offset of field: UEVR_PluginFunctions::register_inline_hook"]
        [::std::mem::offset_of!(UEVR_PluginFunctions, register_inline_hook) - 48usize];
    ["Offset of field: UEVR_PluginFunctions::unregister_inline_hook"]
        [::std::mem::offset_of!(UEVR_PluginFunctions, unregister_inline_hook) - 56usize];
    ["Offset of field: UEVR_PluginFunctions::dispatch_lua_event"]
        [::std::mem::offset_of!(UEVR_PluginFunctions, dispatch_lua_event) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_SDKCallbacks {
    pub on_pre_engine_tick: UEVR_Engine_TickFn,
    pub on_post_engine_tick: UEVR_Engine_TickFn,
    pub on_pre_slate_draw_window_render_thread: UEVR_Slate_DrawWindow_RenderThreadFn,
    pub on_post_slate_draw_window_render_thread: UEVR_Slate_DrawWindow_RenderThreadFn,
    pub on_pre_calculate_stereo_view_offset: UEVR_Stereo_CalculateStereoViewOffsetFn,
    pub on_post_calculate_stereo_view_offset: UEVR_Stereo_CalculateStereoViewOffsetFn,
    pub on_pre_viewport_client_draw: UEVR_ViewportClient_DrawFn,
    pub on_post_viewport_client_draw: UEVR_ViewportClient_DrawFn,
    pub on_early_calculate_stereo_view_offset: UEVR_Stereo_CalculateStereoViewOffsetFn,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_SDKCallbacks"][::std::mem::size_of::<UEVR_SDKCallbacks>() - 72usize];
    ["Alignment of UEVR_SDKCallbacks"][::std::mem::align_of::<UEVR_SDKCallbacks>() - 8usize];
    ["Offset of field: UEVR_SDKCallbacks::on_pre_engine_tick"]
        [::std::mem::offset_of!(UEVR_SDKCallbacks, on_pre_engine_tick) - 0usize];
    ["Offset of field: UEVR_SDKCallbacks::on_post_engine_tick"]
        [::std::mem::offset_of!(UEVR_SDKCallbacks, on_post_engine_tick) - 8usize];
    ["Offset of field: UEVR_SDKCallbacks::on_pre_slate_draw_window_render_thread"][::std::mem::offset_of!(
        UEVR_SDKCallbacks,
        on_pre_slate_draw_window_render_thread
    ) - 16usize];
    ["Offset of field: UEVR_SDKCallbacks::on_post_slate_draw_window_render_thread"][::std::mem::offset_of!(
        UEVR_SDKCallbacks,
        on_post_slate_draw_window_render_thread
    ) - 24usize];
    ["Offset of field: UEVR_SDKCallbacks::on_pre_calculate_stereo_view_offset"]
        [::std::mem::offset_of!(UEVR_SDKCallbacks, on_pre_calculate_stereo_view_offset) - 32usize];
    ["Offset of field: UEVR_SDKCallbacks::on_post_calculate_stereo_view_offset"]
        [::std::mem::offset_of!(UEVR_SDKCallbacks, on_post_calculate_stereo_view_offset) - 40usize];
    ["Offset of field: UEVR_SDKCallbacks::on_pre_viewport_client_draw"]
        [::std::mem::offset_of!(UEVR_SDKCallbacks, on_pre_viewport_client_draw) - 48usize];
    ["Offset of field: UEVR_SDKCallbacks::on_post_viewport_client_draw"]
        [::std::mem::offset_of!(UEVR_SDKCallbacks, on_post_viewport_client_draw) - 56usize];
    ["Offset of field: UEVR_SDKCallbacks::on_early_calculate_stereo_view_offset"][::std::mem::offset_of!(
        UEVR_SDKCallbacks,
        on_early_calculate_stereo_view_offset
    ) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_RendererData {
    pub renderer_type: ::std::os::raw::c_int,
    pub device: *mut ::std::os::raw::c_void,
    pub swapchain: *mut ::std::os::raw::c_void,
    pub command_queue: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_RendererData"][::std::mem::size_of::<UEVR_RendererData>() - 32usize];
    ["Alignment of UEVR_RendererData"][::std::mem::align_of::<UEVR_RendererData>() - 8usize];
    ["Offset of field: UEVR_RendererData::renderer_type"]
        [::std::mem::offset_of!(UEVR_RendererData, renderer_type) - 0usize];
    ["Offset of field: UEVR_RendererData::device"]
        [::std::mem::offset_of!(UEVR_RendererData, device) - 8usize];
    ["Offset of field: UEVR_RendererData::swapchain"]
        [::std::mem::offset_of!(UEVR_RendererData, swapchain) - 16usize];
    ["Offset of field: UEVR_RendererData::command_queue"]
        [::std::mem::offset_of!(UEVR_RendererData, command_queue) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_SDKFunctions {
    pub get_uengine: ::std::option::Option<unsafe extern "C" fn() -> UEVR_UEngineHandle>,
    pub set_cvar_int: ::std::option::Option<
        unsafe extern "C" fn(
            module_name: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
            value: ::std::os::raw::c_int,
        ),
    >,
    pub get_uobject_array: ::std::option::Option<unsafe extern "C" fn() -> UEVR_UObjectArrayHandle>,
    pub get_player_controller: ::std::option::Option<
        unsafe extern "C" fn(index: ::std::os::raw::c_int) -> UEVR_UObjectHandle,
    >,
    pub get_local_pawn: ::std::option::Option<
        unsafe extern "C" fn(index: ::std::os::raw::c_int) -> UEVR_UObjectHandle,
    >,
    pub spawn_object: ::std::option::Option<
        unsafe extern "C" fn(
            klass: UEVR_UClassHandle,
            outer: UEVR_UObjectHandle,
        ) -> UEVR_UObjectHandle,
    >,
    pub execute_command: ::std::option::Option<unsafe extern "C" fn(command: *const wchar_t)>,
    pub execute_command_ex: ::std::option::Option<
        unsafe extern "C" fn(
            world: UEVR_UObjectHandle,
            command: *const wchar_t,
            output_device: *mut ::std::os::raw::c_void,
        ),
    >,
    pub get_console_manager:
        ::std::option::Option<unsafe extern "C" fn() -> UEVR_FConsoleManagerHandle>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_SDKFunctions"][::std::mem::size_of::<UEVR_SDKFunctions>() - 72usize];
    ["Alignment of UEVR_SDKFunctions"][::std::mem::align_of::<UEVR_SDKFunctions>() - 8usize];
    ["Offset of field: UEVR_SDKFunctions::get_uengine"]
        [::std::mem::offset_of!(UEVR_SDKFunctions, get_uengine) - 0usize];
    ["Offset of field: UEVR_SDKFunctions::set_cvar_int"]
        [::std::mem::offset_of!(UEVR_SDKFunctions, set_cvar_int) - 8usize];
    ["Offset of field: UEVR_SDKFunctions::get_uobject_array"]
        [::std::mem::offset_of!(UEVR_SDKFunctions, get_uobject_array) - 16usize];
    ["Offset of field: UEVR_SDKFunctions::get_player_controller"]
        [::std::mem::offset_of!(UEVR_SDKFunctions, get_player_controller) - 24usize];
    ["Offset of field: UEVR_SDKFunctions::get_local_pawn"]
        [::std::mem::offset_of!(UEVR_SDKFunctions, get_local_pawn) - 32usize];
    ["Offset of field: UEVR_SDKFunctions::spawn_object"]
        [::std::mem::offset_of!(UEVR_SDKFunctions, spawn_object) - 40usize];
    ["Offset of field: UEVR_SDKFunctions::execute_command"]
        [::std::mem::offset_of!(UEVR_SDKFunctions, execute_command) - 48usize];
    ["Offset of field: UEVR_SDKFunctions::execute_command_ex"]
        [::std::mem::offset_of!(UEVR_SDKFunctions, execute_command_ex) - 56usize];
    ["Offset of field: UEVR_SDKFunctions::get_console_manager"]
        [::std::mem::offset_of!(UEVR_SDKFunctions, get_console_manager) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_ConsoleFunctions {
    pub get_console_objects: ::std::option::Option<
        unsafe extern "C" fn(mgr: UEVR_FConsoleManagerHandle) -> UEVR_TArrayHandle,
    >,
    pub find_object: ::std::option::Option<
        unsafe extern "C" fn(
            mgr: UEVR_FConsoleManagerHandle,
            name: *const wchar_t,
        ) -> UEVR_IConsoleObjectHandle,
    >,
    pub find_variable: ::std::option::Option<
        unsafe extern "C" fn(
            mgr: UEVR_FConsoleManagerHandle,
            name: *const wchar_t,
        ) -> UEVR_IConsoleVariableHandle,
    >,
    pub find_command: ::std::option::Option<
        unsafe extern "C" fn(
            mgr: UEVR_FConsoleManagerHandle,
            name: *const wchar_t,
        ) -> UEVR_IConsoleCommandHandle,
    >,
    pub as_command: ::std::option::Option<
        unsafe extern "C" fn(object: UEVR_IConsoleObjectHandle) -> UEVR_IConsoleCommandHandle,
    >,
    pub variable_set: ::std::option::Option<
        unsafe extern "C" fn(cvar: UEVR_IConsoleVariableHandle, value: *const wchar_t),
    >,
    pub variable_set_ex: ::std::option::Option<
        unsafe extern "C" fn(
            cvar: UEVR_IConsoleVariableHandle,
            value: *const wchar_t,
            flags: ::std::os::raw::c_uint,
        ),
    >,
    pub variable_get_int: ::std::option::Option<
        unsafe extern "C" fn(cvar: UEVR_IConsoleVariableHandle) -> ::std::os::raw::c_int,
    >,
    pub variable_get_float:
        ::std::option::Option<unsafe extern "C" fn(cvar: UEVR_IConsoleVariableHandle) -> f32>,
    pub command_execute: ::std::option::Option<
        unsafe extern "C" fn(cmd: UEVR_IConsoleCommandHandle, args: *const wchar_t),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_ConsoleFunctions"][::std::mem::size_of::<UEVR_ConsoleFunctions>() - 80usize];
    ["Alignment of UEVR_ConsoleFunctions"]
        [::std::mem::align_of::<UEVR_ConsoleFunctions>() - 8usize];
    ["Offset of field: UEVR_ConsoleFunctions::get_console_objects"]
        [::std::mem::offset_of!(UEVR_ConsoleFunctions, get_console_objects) - 0usize];
    ["Offset of field: UEVR_ConsoleFunctions::find_object"]
        [::std::mem::offset_of!(UEVR_ConsoleFunctions, find_object) - 8usize];
    ["Offset of field: UEVR_ConsoleFunctions::find_variable"]
        [::std::mem::offset_of!(UEVR_ConsoleFunctions, find_variable) - 16usize];
    ["Offset of field: UEVR_ConsoleFunctions::find_command"]
        [::std::mem::offset_of!(UEVR_ConsoleFunctions, find_command) - 24usize];
    ["Offset of field: UEVR_ConsoleFunctions::as_command"]
        [::std::mem::offset_of!(UEVR_ConsoleFunctions, as_command) - 32usize];
    ["Offset of field: UEVR_ConsoleFunctions::variable_set"]
        [::std::mem::offset_of!(UEVR_ConsoleFunctions, variable_set) - 40usize];
    ["Offset of field: UEVR_ConsoleFunctions::variable_set_ex"]
        [::std::mem::offset_of!(UEVR_ConsoleFunctions, variable_set_ex) - 48usize];
    ["Offset of field: UEVR_ConsoleFunctions::variable_get_int"]
        [::std::mem::offset_of!(UEVR_ConsoleFunctions, variable_get_int) - 56usize];
    ["Offset of field: UEVR_ConsoleFunctions::variable_get_float"]
        [::std::mem::offset_of!(UEVR_ConsoleFunctions, variable_get_float) - 64usize];
    ["Offset of field: UEVR_ConsoleFunctions::command_execute"]
        [::std::mem::offset_of!(UEVR_ConsoleFunctions, command_execute) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FUObjectItemHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FUObjectItemHandle__"]
        [::std::mem::size_of::<UEVR_FUObjectItemHandle__>() - 4usize];
    ["Alignment of UEVR_FUObjectItemHandle__"]
        [::std::mem::align_of::<UEVR_FUObjectItemHandle__>() - 4usize];
    ["Offset of field: UEVR_FUObjectItemHandle__::unused"]
        [::std::mem::offset_of!(UEVR_FUObjectItemHandle__, unused) - 0usize];
};
pub type UEVR_FUObjectItemHandle = *mut UEVR_FUObjectItemHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_UObjectArrayFunctions {
    pub find_uobject:
        ::std::option::Option<unsafe extern "C" fn(name: *const wchar_t) -> UEVR_UObjectHandle>,
    pub is_chunked: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub is_inlined: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub get_objects_offset: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_uint>,
    pub get_item_distance: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_uint>,
    pub get_object_count: ::std::option::Option<
        unsafe extern "C" fn(array: UEVR_UObjectArrayHandle) -> ::std::os::raw::c_int,
    >,
    pub get_objects_ptr: ::std::option::Option<
        unsafe extern "C" fn(array: UEVR_UObjectArrayHandle) -> *mut ::std::os::raw::c_void,
    >,
    pub get_object: ::std::option::Option<
        unsafe extern "C" fn(
            array: UEVR_UObjectArrayHandle,
            index: ::std::os::raw::c_int,
        ) -> UEVR_UObjectHandle,
    >,
    pub get_item: ::std::option::Option<
        unsafe extern "C" fn(
            array: UEVR_UObjectArrayHandle,
            index: ::std::os::raw::c_int,
        ) -> UEVR_FUObjectItemHandle,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_UObjectArrayFunctions"]
        [::std::mem::size_of::<UEVR_UObjectArrayFunctions>() - 72usize];
    ["Alignment of UEVR_UObjectArrayFunctions"]
        [::std::mem::align_of::<UEVR_UObjectArrayFunctions>() - 8usize];
    ["Offset of field: UEVR_UObjectArrayFunctions::find_uobject"]
        [::std::mem::offset_of!(UEVR_UObjectArrayFunctions, find_uobject) - 0usize];
    ["Offset of field: UEVR_UObjectArrayFunctions::is_chunked"]
        [::std::mem::offset_of!(UEVR_UObjectArrayFunctions, is_chunked) - 8usize];
    ["Offset of field: UEVR_UObjectArrayFunctions::is_inlined"]
        [::std::mem::offset_of!(UEVR_UObjectArrayFunctions, is_inlined) - 16usize];
    ["Offset of field: UEVR_UObjectArrayFunctions::get_objects_offset"]
        [::std::mem::offset_of!(UEVR_UObjectArrayFunctions, get_objects_offset) - 24usize];
    ["Offset of field: UEVR_UObjectArrayFunctions::get_item_distance"]
        [::std::mem::offset_of!(UEVR_UObjectArrayFunctions, get_item_distance) - 32usize];
    ["Offset of field: UEVR_UObjectArrayFunctions::get_object_count"]
        [::std::mem::offset_of!(UEVR_UObjectArrayFunctions, get_object_count) - 40usize];
    ["Offset of field: UEVR_UObjectArrayFunctions::get_objects_ptr"]
        [::std::mem::offset_of!(UEVR_UObjectArrayFunctions, get_objects_ptr) - 48usize];
    ["Offset of field: UEVR_UObjectArrayFunctions::get_object"]
        [::std::mem::offset_of!(UEVR_UObjectArrayFunctions, get_object) - 56usize];
    ["Offset of field: UEVR_UObjectArrayFunctions::get_item"]
        [::std::mem::offset_of!(UEVR_UObjectArrayFunctions, get_item) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FFieldFunctions {
    pub get_next:
        ::std::option::Option<unsafe extern "C" fn(field: UEVR_FFieldHandle) -> UEVR_FFieldHandle>,
    pub get_class: ::std::option::Option<
        unsafe extern "C" fn(field: UEVR_FFieldHandle) -> UEVR_FFieldClassHandle,
    >,
    pub get_fname:
        ::std::option::Option<unsafe extern "C" fn(field: UEVR_FFieldHandle) -> UEVR_FNameHandle>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FFieldFunctions"][::std::mem::size_of::<UEVR_FFieldFunctions>() - 24usize];
    ["Alignment of UEVR_FFieldFunctions"][::std::mem::align_of::<UEVR_FFieldFunctions>() - 8usize];
    ["Offset of field: UEVR_FFieldFunctions::get_next"]
        [::std::mem::offset_of!(UEVR_FFieldFunctions, get_next) - 0usize];
    ["Offset of field: UEVR_FFieldFunctions::get_class"]
        [::std::mem::offset_of!(UEVR_FFieldFunctions, get_class) - 8usize];
    ["Offset of field: UEVR_FFieldFunctions::get_fname"]
        [::std::mem::offset_of!(UEVR_FFieldFunctions, get_fname) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_UFieldFunctions {
    pub get_next:
        ::std::option::Option<unsafe extern "C" fn(field: UEVR_UFieldHandle) -> UEVR_UFieldHandle>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_UFieldFunctions"][::std::mem::size_of::<UEVR_UFieldFunctions>() - 8usize];
    ["Alignment of UEVR_UFieldFunctions"][::std::mem::align_of::<UEVR_UFieldFunctions>() - 8usize];
    ["Offset of field: UEVR_UFieldFunctions::get_next"]
        [::std::mem::offset_of!(UEVR_UFieldFunctions, get_next) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FPropertyFunctions {
    pub get_offset: ::std::option::Option<
        unsafe extern "C" fn(prop: UEVR_FPropertyHandle) -> ::std::os::raw::c_int,
    >,
    pub get_property_flags: ::std::option::Option<
        unsafe extern "C" fn(prop: UEVR_FPropertyHandle) -> ::std::os::raw::c_ulonglong,
    >,
    pub is_param: ::std::option::Option<unsafe extern "C" fn(prop: UEVR_FPropertyHandle) -> bool>,
    pub is_out_param:
        ::std::option::Option<unsafe extern "C" fn(prop: UEVR_FPropertyHandle) -> bool>,
    pub is_return_param:
        ::std::option::Option<unsafe extern "C" fn(prop: UEVR_FPropertyHandle) -> bool>,
    pub is_reference_param:
        ::std::option::Option<unsafe extern "C" fn(prop: UEVR_FPropertyHandle) -> bool>,
    pub is_pod: ::std::option::Option<unsafe extern "C" fn(prop: UEVR_FPropertyHandle) -> bool>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FPropertyFunctions"][::std::mem::size_of::<UEVR_FPropertyFunctions>() - 56usize];
    ["Alignment of UEVR_FPropertyFunctions"]
        [::std::mem::align_of::<UEVR_FPropertyFunctions>() - 8usize];
    ["Offset of field: UEVR_FPropertyFunctions::get_offset"]
        [::std::mem::offset_of!(UEVR_FPropertyFunctions, get_offset) - 0usize];
    ["Offset of field: UEVR_FPropertyFunctions::get_property_flags"]
        [::std::mem::offset_of!(UEVR_FPropertyFunctions, get_property_flags) - 8usize];
    ["Offset of field: UEVR_FPropertyFunctions::is_param"]
        [::std::mem::offset_of!(UEVR_FPropertyFunctions, is_param) - 16usize];
    ["Offset of field: UEVR_FPropertyFunctions::is_out_param"]
        [::std::mem::offset_of!(UEVR_FPropertyFunctions, is_out_param) - 24usize];
    ["Offset of field: UEVR_FPropertyFunctions::is_return_param"]
        [::std::mem::offset_of!(UEVR_FPropertyFunctions, is_return_param) - 32usize];
    ["Offset of field: UEVR_FPropertyFunctions::is_reference_param"]
        [::std::mem::offset_of!(UEVR_FPropertyFunctions, is_reference_param) - 40usize];
    ["Offset of field: UEVR_FPropertyFunctions::is_pod"]
        [::std::mem::offset_of!(UEVR_FPropertyFunctions, is_pod) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_UStructFunctions {
    pub get_super_struct: ::std::option::Option<
        unsafe extern "C" fn(klass: UEVR_UStructHandle) -> UEVR_UStructHandle,
    >,
    pub get_child_properties:
        ::std::option::Option<unsafe extern "C" fn(klass: UEVR_UStructHandle) -> UEVR_FFieldHandle>,
    pub find_function: ::std::option::Option<
        unsafe extern "C" fn(
            klass: UEVR_UStructHandle,
            name: *const wchar_t,
        ) -> UEVR_UFunctionHandle,
    >,
    pub find_property: ::std::option::Option<
        unsafe extern "C" fn(
            klass: UEVR_UStructHandle,
            name: *const wchar_t,
        ) -> UEVR_FPropertyHandle,
    >,
    pub get_properties_size: ::std::option::Option<
        unsafe extern "C" fn(klass: UEVR_UStructHandle) -> ::std::os::raw::c_int,
    >,
    pub get_min_alignment: ::std::option::Option<
        unsafe extern "C" fn(klass: UEVR_UStructHandle) -> ::std::os::raw::c_int,
    >,
    pub get_children:
        ::std::option::Option<unsafe extern "C" fn(klass: UEVR_UStructHandle) -> UEVR_UFieldHandle>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_UStructFunctions"][::std::mem::size_of::<UEVR_UStructFunctions>() - 56usize];
    ["Alignment of UEVR_UStructFunctions"]
        [::std::mem::align_of::<UEVR_UStructFunctions>() - 8usize];
    ["Offset of field: UEVR_UStructFunctions::get_super_struct"]
        [::std::mem::offset_of!(UEVR_UStructFunctions, get_super_struct) - 0usize];
    ["Offset of field: UEVR_UStructFunctions::get_child_properties"]
        [::std::mem::offset_of!(UEVR_UStructFunctions, get_child_properties) - 8usize];
    ["Offset of field: UEVR_UStructFunctions::find_function"]
        [::std::mem::offset_of!(UEVR_UStructFunctions, find_function) - 16usize];
    ["Offset of field: UEVR_UStructFunctions::find_property"]
        [::std::mem::offset_of!(UEVR_UStructFunctions, find_property) - 24usize];
    ["Offset of field: UEVR_UStructFunctions::get_properties_size"]
        [::std::mem::offset_of!(UEVR_UStructFunctions, get_properties_size) - 32usize];
    ["Offset of field: UEVR_UStructFunctions::get_min_alignment"]
        [::std::mem::offset_of!(UEVR_UStructFunctions, get_min_alignment) - 40usize];
    ["Offset of field: UEVR_UStructFunctions::get_children"]
        [::std::mem::offset_of!(UEVR_UStructFunctions, get_children) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_UClassFunctions {
    pub get_class_default_object:
        ::std::option::Option<unsafe extern "C" fn(klass: UEVR_UClassHandle) -> UEVR_UObjectHandle>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_UClassFunctions"][::std::mem::size_of::<UEVR_UClassFunctions>() - 8usize];
    ["Alignment of UEVR_UClassFunctions"][::std::mem::align_of::<UEVR_UClassFunctions>() - 8usize];
    ["Offset of field: UEVR_UClassFunctions::get_class_default_object"]
        [::std::mem::offset_of!(UEVR_UClassFunctions, get_class_default_object) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_UFunctionFunctions {
    pub get_native_function: ::std::option::Option<
        unsafe extern "C" fn(function: UEVR_UFunctionHandle) -> *mut ::std::os::raw::c_void,
    >,
    pub hook_ptr: ::std::option::Option<
        unsafe extern "C" fn(
            function: UEVR_UFunctionHandle,
            pre_hook: UEVR_UFunction_NativePreFn,
            post_hook: UEVR_UFunction_NativePostFn,
        ) -> bool,
    >,
    pub get_function_flags: ::std::option::Option<
        unsafe extern "C" fn(function: UEVR_UFunctionHandle) -> ::std::os::raw::c_uint,
    >,
    pub set_function_flags: ::std::option::Option<
        unsafe extern "C" fn(function: UEVR_UFunctionHandle, flags: ::std::os::raw::c_uint),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_UFunctionFunctions"][::std::mem::size_of::<UEVR_UFunctionFunctions>() - 32usize];
    ["Alignment of UEVR_UFunctionFunctions"]
        [::std::mem::align_of::<UEVR_UFunctionFunctions>() - 8usize];
    ["Offset of field: UEVR_UFunctionFunctions::get_native_function"]
        [::std::mem::offset_of!(UEVR_UFunctionFunctions, get_native_function) - 0usize];
    ["Offset of field: UEVR_UFunctionFunctions::hook_ptr"]
        [::std::mem::offset_of!(UEVR_UFunctionFunctions, hook_ptr) - 8usize];
    ["Offset of field: UEVR_UFunctionFunctions::get_function_flags"]
        [::std::mem::offset_of!(UEVR_UFunctionFunctions, get_function_flags) - 16usize];
    ["Offset of field: UEVR_UFunctionFunctions::set_function_flags"]
        [::std::mem::offset_of!(UEVR_UFunctionFunctions, set_function_flags) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_UObjectFunctions {
    pub get_class: ::std::option::Option<
        unsafe extern "C" fn(object: UEVR_UObjectHandle) -> UEVR_UClassHandle,
    >,
    pub get_outer: ::std::option::Option<
        unsafe extern "C" fn(object: UEVR_UObjectHandle) -> UEVR_UObjectHandle,
    >,
    pub get_property_data: ::std::option::Option<
        unsafe extern "C" fn(
            object: UEVR_UObjectHandle,
            name: *const wchar_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub is_a: ::std::option::Option<
        unsafe extern "C" fn(object: UEVR_UObjectHandle, other: UEVR_UClassHandle) -> bool,
    >,
    pub process_event: ::std::option::Option<
        unsafe extern "C" fn(
            object: UEVR_UObjectHandle,
            function: UEVR_UFunctionHandle,
            params: *mut ::std::os::raw::c_void,
        ),
    >,
    pub call_function: ::std::option::Option<
        unsafe extern "C" fn(
            object: UEVR_UObjectHandle,
            name: *const wchar_t,
            params: *mut ::std::os::raw::c_void,
        ),
    >,
    pub get_fname:
        ::std::option::Option<unsafe extern "C" fn(object: UEVR_UObjectHandle) -> UEVR_FNameHandle>,
    pub get_bool_property: ::std::option::Option<
        unsafe extern "C" fn(object: UEVR_UObjectHandle, name: *const wchar_t) -> bool,
    >,
    pub set_bool_property: ::std::option::Option<
        unsafe extern "C" fn(object: UEVR_UObjectHandle, name: *const wchar_t, value: bool),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_UObjectFunctions"][::std::mem::size_of::<UEVR_UObjectFunctions>() - 72usize];
    ["Alignment of UEVR_UObjectFunctions"]
        [::std::mem::align_of::<UEVR_UObjectFunctions>() - 8usize];
    ["Offset of field: UEVR_UObjectFunctions::get_class"]
        [::std::mem::offset_of!(UEVR_UObjectFunctions, get_class) - 0usize];
    ["Offset of field: UEVR_UObjectFunctions::get_outer"]
        [::std::mem::offset_of!(UEVR_UObjectFunctions, get_outer) - 8usize];
    ["Offset of field: UEVR_UObjectFunctions::get_property_data"]
        [::std::mem::offset_of!(UEVR_UObjectFunctions, get_property_data) - 16usize];
    ["Offset of field: UEVR_UObjectFunctions::is_a"]
        [::std::mem::offset_of!(UEVR_UObjectFunctions, is_a) - 24usize];
    ["Offset of field: UEVR_UObjectFunctions::process_event"]
        [::std::mem::offset_of!(UEVR_UObjectFunctions, process_event) - 32usize];
    ["Offset of field: UEVR_UObjectFunctions::call_function"]
        [::std::mem::offset_of!(UEVR_UObjectFunctions, call_function) - 40usize];
    ["Offset of field: UEVR_UObjectFunctions::get_fname"]
        [::std::mem::offset_of!(UEVR_UObjectFunctions, get_fname) - 48usize];
    ["Offset of field: UEVR_UObjectFunctions::get_bool_property"]
        [::std::mem::offset_of!(UEVR_UObjectFunctions, get_bool_property) - 56usize];
    ["Offset of field: UEVR_UObjectFunctions::set_bool_property"]
        [::std::mem::offset_of!(UEVR_UObjectFunctions, set_bool_property) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_UObjectHookMotionControllerStateHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_UObjectHookMotionControllerStateHandle__"]
        [::std::mem::size_of::<UEVR_UObjectHookMotionControllerStateHandle__>() - 4usize];
    ["Alignment of UEVR_UObjectHookMotionControllerStateHandle__"]
        [::std::mem::align_of::<UEVR_UObjectHookMotionControllerStateHandle__>() - 4usize];
    ["Offset of field: UEVR_UObjectHookMotionControllerStateHandle__::unused"]
        [::std::mem::offset_of!(UEVR_UObjectHookMotionControllerStateHandle__, unused) - 0usize];
};
pub type UEVR_UObjectHookMotionControllerStateHandle =
    *mut UEVR_UObjectHookMotionControllerStateHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_UObjectHookMotionControllerStateFunctions {
    pub set_rotation_offset: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: UEVR_UObjectHookMotionControllerStateHandle,
            rotation: *const UEVR_Quaternionf,
        ),
    >,
    pub set_location_offset: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: UEVR_UObjectHookMotionControllerStateHandle,
            location: *const UEVR_Vector3f,
        ),
    >,
    pub set_hand: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: UEVR_UObjectHookMotionControllerStateHandle,
            hand: ::std::os::raw::c_uint,
        ),
    >,
    pub set_permanent: ::std::option::Option<
        unsafe extern "C" fn(arg1: UEVR_UObjectHookMotionControllerStateHandle, permanent: bool),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_UObjectHookMotionControllerStateFunctions"]
        [::std::mem::size_of::<UEVR_UObjectHookMotionControllerStateFunctions>() - 32usize];
    ["Alignment of UEVR_UObjectHookMotionControllerStateFunctions"]
        [::std::mem::align_of::<UEVR_UObjectHookMotionControllerStateFunctions>() - 8usize];
    ["Offset of field: UEVR_UObjectHookMotionControllerStateFunctions::set_rotation_offset"][::std::mem::offset_of!(
        UEVR_UObjectHookMotionControllerStateFunctions,
        set_rotation_offset
    )
        - 0usize];
    ["Offset of field: UEVR_UObjectHookMotionControllerStateFunctions::set_location_offset"][::std::mem::offset_of!(
        UEVR_UObjectHookMotionControllerStateFunctions,
        set_location_offset
    )
        - 8usize];
    ["Offset of field: UEVR_UObjectHookMotionControllerStateFunctions::set_hand"][::std::mem::offset_of!(
        UEVR_UObjectHookMotionControllerStateFunctions,
        set_hand
    ) - 16usize];
    ["Offset of field: UEVR_UObjectHookMotionControllerStateFunctions::set_permanent"][::std::mem::offset_of!(
        UEVR_UObjectHookMotionControllerStateFunctions,
        set_permanent
    ) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_UObjectHookFunctions {
    pub activate: ::std::option::Option<unsafe extern "C" fn()>,
    pub exists: ::std::option::Option<unsafe extern "C" fn(object: UEVR_UObjectHandle) -> bool>,
    pub get_objects_by_class: ::std::option::Option<
        unsafe extern "C" fn(
            klass: UEVR_UClassHandle,
            out_objects: *mut UEVR_UObjectHandle,
            max_objects: ::std::os::raw::c_uint,
            allow_default: bool,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_objects_by_class_name: ::std::option::Option<
        unsafe extern "C" fn(
            class_name: *const wchar_t,
            out_objects: *mut UEVR_UObjectHandle,
            max_objects: ::std::os::raw::c_uint,
            allow_default: bool,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_first_object_by_class: ::std::option::Option<
        unsafe extern "C" fn(klass: UEVR_UClassHandle, allow_default: bool) -> UEVR_UObjectHandle,
    >,
    pub get_first_object_by_class_name: ::std::option::Option<
        unsafe extern "C" fn(class_name: *const wchar_t, allow_default: bool) -> UEVR_UObjectHandle,
    >,
    pub get_or_add_motion_controller_state: ::std::option::Option<
        unsafe extern "C" fn(
            object: UEVR_UObjectHandle,
        ) -> UEVR_UObjectHookMotionControllerStateHandle,
    >,
    pub get_motion_controller_state: ::std::option::Option<
        unsafe extern "C" fn(
            object: UEVR_UObjectHandle,
        ) -> UEVR_UObjectHookMotionControllerStateHandle,
    >,
    pub mc_state: *mut UEVR_UObjectHookMotionControllerStateFunctions,
    pub is_disabled: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub set_disabled: ::std::option::Option<unsafe extern "C" fn(disabled: bool)>,
    pub remove_motion_controller_state:
        ::std::option::Option<unsafe extern "C" fn(object: UEVR_UObjectHandle)>,
    pub remove_all_motion_controller_states: ::std::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_UObjectHookFunctions"]
        [::std::mem::size_of::<UEVR_UObjectHookFunctions>() - 104usize];
    ["Alignment of UEVR_UObjectHookFunctions"]
        [::std::mem::align_of::<UEVR_UObjectHookFunctions>() - 8usize];
    ["Offset of field: UEVR_UObjectHookFunctions::activate"]
        [::std::mem::offset_of!(UEVR_UObjectHookFunctions, activate) - 0usize];
    ["Offset of field: UEVR_UObjectHookFunctions::exists"]
        [::std::mem::offset_of!(UEVR_UObjectHookFunctions, exists) - 8usize];
    ["Offset of field: UEVR_UObjectHookFunctions::get_objects_by_class"]
        [::std::mem::offset_of!(UEVR_UObjectHookFunctions, get_objects_by_class) - 16usize];
    ["Offset of field: UEVR_UObjectHookFunctions::get_objects_by_class_name"]
        [::std::mem::offset_of!(UEVR_UObjectHookFunctions, get_objects_by_class_name) - 24usize];
    ["Offset of field: UEVR_UObjectHookFunctions::get_first_object_by_class"]
        [::std::mem::offset_of!(UEVR_UObjectHookFunctions, get_first_object_by_class) - 32usize];
    ["Offset of field: UEVR_UObjectHookFunctions::get_first_object_by_class_name"][::std::mem::offset_of!(
        UEVR_UObjectHookFunctions,
        get_first_object_by_class_name
    ) - 40usize];
    ["Offset of field: UEVR_UObjectHookFunctions::get_or_add_motion_controller_state"][::std::mem::offset_of!(
        UEVR_UObjectHookFunctions,
        get_or_add_motion_controller_state
    ) - 48usize];
    ["Offset of field: UEVR_UObjectHookFunctions::get_motion_controller_state"]
        [::std::mem::offset_of!(UEVR_UObjectHookFunctions, get_motion_controller_state) - 56usize];
    ["Offset of field: UEVR_UObjectHookFunctions::mc_state"]
        [::std::mem::offset_of!(UEVR_UObjectHookFunctions, mc_state) - 64usize];
    ["Offset of field: UEVR_UObjectHookFunctions::is_disabled"]
        [::std::mem::offset_of!(UEVR_UObjectHookFunctions, is_disabled) - 72usize];
    ["Offset of field: UEVR_UObjectHookFunctions::set_disabled"]
        [::std::mem::offset_of!(UEVR_UObjectHookFunctions, set_disabled) - 80usize];
    ["Offset of field: UEVR_UObjectHookFunctions::remove_motion_controller_state"][::std::mem::offset_of!(
        UEVR_UObjectHookFunctions,
        remove_motion_controller_state
    ) - 88usize];
    ["Offset of field: UEVR_UObjectHookFunctions::remove_all_motion_controller_states"][::std::mem::offset_of!(
        UEVR_UObjectHookFunctions,
        remove_all_motion_controller_states
    )
        - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FFieldClassFunctions {
    pub get_fname: ::std::option::Option<
        unsafe extern "C" fn(field_class: UEVR_FFieldClassHandle) -> UEVR_FNameHandle,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FFieldClassFunctions"]
        [::std::mem::size_of::<UEVR_FFieldClassFunctions>() - 8usize];
    ["Alignment of UEVR_FFieldClassFunctions"]
        [::std::mem::align_of::<UEVR_FFieldClassFunctions>() - 8usize];
    ["Offset of field: UEVR_FFieldClassFunctions::get_fname"]
        [::std::mem::offset_of!(UEVR_FFieldClassFunctions, get_fname) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FNameFunctions {
    pub to_string: ::std::option::Option<
        unsafe extern "C" fn(
            name: UEVR_FNameHandle,
            buffer: *mut wchar_t,
            buffer_size: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_uint,
    >,
    pub constructor: ::std::option::Option<
        unsafe extern "C" fn(
            name: UEVR_FNameHandle,
            data: *const wchar_t,
            find_type: ::std::os::raw::c_uint,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FNameFunctions"][::std::mem::size_of::<UEVR_FNameFunctions>() - 16usize];
    ["Alignment of UEVR_FNameFunctions"][::std::mem::align_of::<UEVR_FNameFunctions>() - 8usize];
    ["Offset of field: UEVR_FNameFunctions::to_string"]
        [::std::mem::offset_of!(UEVR_FNameFunctions, to_string) - 0usize];
    ["Offset of field: UEVR_FNameFunctions::constructor"]
        [::std::mem::offset_of!(UEVR_FNameFunctions, constructor) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FMallocFunctions {
    pub get: ::std::option::Option<unsafe extern "C" fn() -> UEVR_FMallocHandle>,
    pub malloc: ::std::option::Option<
        unsafe extern "C" fn(
            instance: UEVR_FMallocHandle,
            size: ::std::os::raw::c_uint,
            alignment: ::std::os::raw::c_uint,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub realloc: ::std::option::Option<
        unsafe extern "C" fn(
            instance: UEVR_FMallocHandle,
            ptr: *mut ::std::os::raw::c_void,
            size: ::std::os::raw::c_uint,
            alignment: ::std::os::raw::c_uint,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(instance: UEVR_FMallocHandle, ptr: *mut ::std::os::raw::c_void),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FMallocFunctions"][::std::mem::size_of::<UEVR_FMallocFunctions>() - 32usize];
    ["Alignment of UEVR_FMallocFunctions"]
        [::std::mem::align_of::<UEVR_FMallocFunctions>() - 8usize];
    ["Offset of field: UEVR_FMallocFunctions::get"]
        [::std::mem::offset_of!(UEVR_FMallocFunctions, get) - 0usize];
    ["Offset of field: UEVR_FMallocFunctions::malloc"]
        [::std::mem::offset_of!(UEVR_FMallocFunctions, malloc) - 8usize];
    ["Offset of field: UEVR_FMallocFunctions::realloc"]
        [::std::mem::offset_of!(UEVR_FMallocFunctions, realloc) - 16usize];
    ["Offset of field: UEVR_FMallocFunctions::free"]
        [::std::mem::offset_of!(UEVR_FMallocFunctions, free) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_IPooledRenderTargetHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_IPooledRenderTargetHandle__"]
        [::std::mem::size_of::<UEVR_IPooledRenderTargetHandle__>() - 4usize];
    ["Alignment of UEVR_IPooledRenderTargetHandle__"]
        [::std::mem::align_of::<UEVR_IPooledRenderTargetHandle__>() - 4usize];
    ["Offset of field: UEVR_IPooledRenderTargetHandle__::unused"]
        [::std::mem::offset_of!(UEVR_IPooledRenderTargetHandle__, unused) - 0usize];
};
pub type UEVR_IPooledRenderTargetHandle = *mut UEVR_IPooledRenderTargetHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FRenderTargetPoolHookFunctions {
    pub activate: ::std::option::Option<unsafe extern "C" fn()>,
    pub get_render_target: ::std::option::Option<
        unsafe extern "C" fn(name: *const wchar_t) -> UEVR_IPooledRenderTargetHandle,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FRenderTargetPoolHookFunctions"]
        [::std::mem::size_of::<UEVR_FRenderTargetPoolHookFunctions>() - 16usize];
    ["Alignment of UEVR_FRenderTargetPoolHookFunctions"]
        [::std::mem::align_of::<UEVR_FRenderTargetPoolHookFunctions>() - 8usize];
    ["Offset of field: UEVR_FRenderTargetPoolHookFunctions::activate"]
        [::std::mem::offset_of!(UEVR_FRenderTargetPoolHookFunctions, activate) - 0usize];
    ["Offset of field: UEVR_FRenderTargetPoolHookFunctions::get_render_target"]
        [::std::mem::offset_of!(UEVR_FRenderTargetPoolHookFunctions, get_render_target) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FFakeStereoRenderingHookFunctions {
    pub get_scene_render_target:
        ::std::option::Option<unsafe extern "C" fn() -> UEVR_FRHITexture2DHandle>,
    pub get_ui_render_target:
        ::std::option::Option<unsafe extern "C" fn() -> UEVR_FRHITexture2DHandle>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FFakeStereoRenderingHookFunctions"]
        [::std::mem::size_of::<UEVR_FFakeStereoRenderingHookFunctions>() - 16usize];
    ["Alignment of UEVR_FFakeStereoRenderingHookFunctions"]
        [::std::mem::align_of::<UEVR_FFakeStereoRenderingHookFunctions>() - 8usize];
    ["Offset of field: UEVR_FFakeStereoRenderingHookFunctions::get_scene_render_target"][::std::mem::offset_of!(
        UEVR_FFakeStereoRenderingHookFunctions,
        get_scene_render_target
    )
        - 0usize];
    ["Offset of field: UEVR_FFakeStereoRenderingHookFunctions::get_ui_render_target"][::std::mem::offset_of!(
        UEVR_FFakeStereoRenderingHookFunctions,
        get_ui_render_target
    ) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FRHITexture2DFunctions {
    pub get_native_resource: ::std::option::Option<
        unsafe extern "C" fn(texture: UEVR_FRHITexture2DHandle) -> *mut ::std::os::raw::c_void,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FRHITexture2DFunctions"]
        [::std::mem::size_of::<UEVR_FRHITexture2DFunctions>() - 8usize];
    ["Alignment of UEVR_FRHITexture2DFunctions"]
        [::std::mem::align_of::<UEVR_FRHITexture2DFunctions>() - 8usize];
    ["Offset of field: UEVR_FRHITexture2DFunctions::get_native_resource"]
        [::std::mem::offset_of!(UEVR_FRHITexture2DFunctions, get_native_resource) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_StructOpsHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_StructOpsHandle__"][::std::mem::size_of::<UEVR_StructOpsHandle__>() - 4usize];
    ["Alignment of UEVR_StructOpsHandle__"]
        [::std::mem::align_of::<UEVR_StructOpsHandle__>() - 4usize];
    ["Offset of field: UEVR_StructOpsHandle__::unused"]
        [::std::mem::offset_of!(UEVR_StructOpsHandle__, unused) - 0usize];
};
pub type UEVR_StructOpsHandle = *mut UEVR_StructOpsHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_UScriptStructFunctions {
    pub get_struct_ops: ::std::option::Option<
        unsafe extern "C" fn(script_struct: UEVR_UScriptStructHandle) -> UEVR_StructOpsHandle,
    >,
    pub get_struct_size: ::std::option::Option<
        unsafe extern "C" fn(script_struct: UEVR_UScriptStructHandle) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_UScriptStructFunctions"]
        [::std::mem::size_of::<UEVR_UScriptStructFunctions>() - 16usize];
    ["Alignment of UEVR_UScriptStructFunctions"]
        [::std::mem::align_of::<UEVR_UScriptStructFunctions>() - 8usize];
    ["Offset of field: UEVR_UScriptStructFunctions::get_struct_ops"]
        [::std::mem::offset_of!(UEVR_UScriptStructFunctions, get_struct_ops) - 0usize];
    ["Offset of field: UEVR_UScriptStructFunctions::get_struct_size"]
        [::std::mem::offset_of!(UEVR_UScriptStructFunctions, get_struct_size) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FArrayPropertyFunctions {
    pub get_inner: ::std::option::Option<
        unsafe extern "C" fn(prop: UEVR_FArrayPropertyHandle) -> UEVR_FPropertyHandle,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FArrayPropertyFunctions"]
        [::std::mem::size_of::<UEVR_FArrayPropertyFunctions>() - 8usize];
    ["Alignment of UEVR_FArrayPropertyFunctions"]
        [::std::mem::align_of::<UEVR_FArrayPropertyFunctions>() - 8usize];
    ["Offset of field: UEVR_FArrayPropertyFunctions::get_inner"]
        [::std::mem::offset_of!(UEVR_FArrayPropertyFunctions, get_inner) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FBoolPropertyFunctions {
    pub get_field_size: ::std::option::Option<
        unsafe extern "C" fn(prop: UEVR_FBoolPropertyHandle) -> ::std::os::raw::c_uint,
    >,
    pub get_byte_offset: ::std::option::Option<
        unsafe extern "C" fn(prop: UEVR_FBoolPropertyHandle) -> ::std::os::raw::c_uint,
    >,
    pub get_byte_mask: ::std::option::Option<
        unsafe extern "C" fn(prop: UEVR_FBoolPropertyHandle) -> ::std::os::raw::c_uint,
    >,
    pub get_field_mask: ::std::option::Option<
        unsafe extern "C" fn(prop: UEVR_FBoolPropertyHandle) -> ::std::os::raw::c_uint,
    >,
    pub get_value_from_object: ::std::option::Option<
        unsafe extern "C" fn(
            prop: UEVR_FBoolPropertyHandle,
            object: *mut ::std::os::raw::c_void,
        ) -> bool,
    >,
    pub get_value_from_propbase: ::std::option::Option<
        unsafe extern "C" fn(
            prop: UEVR_FBoolPropertyHandle,
            addr: *mut ::std::os::raw::c_void,
        ) -> bool,
    >,
    pub set_value_in_object: ::std::option::Option<
        unsafe extern "C" fn(
            prop: UEVR_FBoolPropertyHandle,
            object: *mut ::std::os::raw::c_void,
            value: bool,
        ),
    >,
    pub set_value_in_propbase: ::std::option::Option<
        unsafe extern "C" fn(
            prop: UEVR_FBoolPropertyHandle,
            addr: *mut ::std::os::raw::c_void,
            value: bool,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FBoolPropertyFunctions"]
        [::std::mem::size_of::<UEVR_FBoolPropertyFunctions>() - 64usize];
    ["Alignment of UEVR_FBoolPropertyFunctions"]
        [::std::mem::align_of::<UEVR_FBoolPropertyFunctions>() - 8usize];
    ["Offset of field: UEVR_FBoolPropertyFunctions::get_field_size"]
        [::std::mem::offset_of!(UEVR_FBoolPropertyFunctions, get_field_size) - 0usize];
    ["Offset of field: UEVR_FBoolPropertyFunctions::get_byte_offset"]
        [::std::mem::offset_of!(UEVR_FBoolPropertyFunctions, get_byte_offset) - 8usize];
    ["Offset of field: UEVR_FBoolPropertyFunctions::get_byte_mask"]
        [::std::mem::offset_of!(UEVR_FBoolPropertyFunctions, get_byte_mask) - 16usize];
    ["Offset of field: UEVR_FBoolPropertyFunctions::get_field_mask"]
        [::std::mem::offset_of!(UEVR_FBoolPropertyFunctions, get_field_mask) - 24usize];
    ["Offset of field: UEVR_FBoolPropertyFunctions::get_value_from_object"]
        [::std::mem::offset_of!(UEVR_FBoolPropertyFunctions, get_value_from_object) - 32usize];
    ["Offset of field: UEVR_FBoolPropertyFunctions::get_value_from_propbase"]
        [::std::mem::offset_of!(UEVR_FBoolPropertyFunctions, get_value_from_propbase) - 40usize];
    ["Offset of field: UEVR_FBoolPropertyFunctions::set_value_in_object"]
        [::std::mem::offset_of!(UEVR_FBoolPropertyFunctions, set_value_in_object) - 48usize];
    ["Offset of field: UEVR_FBoolPropertyFunctions::set_value_in_propbase"]
        [::std::mem::offset_of!(UEVR_FBoolPropertyFunctions, set_value_in_propbase) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FStructPropertyFunctions {
    pub get_struct: ::std::option::Option<
        unsafe extern "C" fn(prop: UEVR_FStructPropertyHandle) -> UEVR_UScriptStructHandle,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FStructPropertyFunctions"]
        [::std::mem::size_of::<UEVR_FStructPropertyFunctions>() - 8usize];
    ["Alignment of UEVR_FStructPropertyFunctions"]
        [::std::mem::align_of::<UEVR_FStructPropertyFunctions>() - 8usize];
    ["Offset of field: UEVR_FStructPropertyFunctions::get_struct"]
        [::std::mem::offset_of!(UEVR_FStructPropertyFunctions, get_struct) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_FEnumPropertyFunctions {
    pub get_underlying_prop: ::std::option::Option<
        unsafe extern "C" fn(prop: UEVR_FEnumPropertyHandle) -> UEVR_FNumericPropertyHandle,
    >,
    pub get_enum: ::std::option::Option<
        unsafe extern "C" fn(prop: UEVR_FEnumPropertyHandle) -> UEVR_UEnumHandle,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_FEnumPropertyFunctions"]
        [::std::mem::size_of::<UEVR_FEnumPropertyFunctions>() - 16usize];
    ["Alignment of UEVR_FEnumPropertyFunctions"]
        [::std::mem::align_of::<UEVR_FEnumPropertyFunctions>() - 8usize];
    ["Offset of field: UEVR_FEnumPropertyFunctions::get_underlying_prop"]
        [::std::mem::offset_of!(UEVR_FEnumPropertyFunctions, get_underlying_prop) - 0usize];
    ["Offset of field: UEVR_FEnumPropertyFunctions::get_enum"]
        [::std::mem::offset_of!(UEVR_FEnumPropertyFunctions, get_enum) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_SDKData {
    pub functions: *const UEVR_SDKFunctions,
    pub callbacks: *const UEVR_SDKCallbacks,
    pub uobject: *const UEVR_UObjectFunctions,
    pub uobject_array: *const UEVR_UObjectArrayFunctions,
    pub ffield: *const UEVR_FFieldFunctions,
    pub fproperty: *const UEVR_FPropertyFunctions,
    pub ustruct: *const UEVR_UStructFunctions,
    pub uclass: *const UEVR_UClassFunctions,
    pub ufunction: *const UEVR_UFunctionFunctions,
    pub uobject_hook: *const UEVR_UObjectHookFunctions,
    pub ffield_class: *const UEVR_FFieldClassFunctions,
    pub fname: *const UEVR_FNameFunctions,
    pub console: *const UEVR_ConsoleFunctions,
    pub malloc: *const UEVR_FMallocFunctions,
    pub render_target_pool_hook: *const UEVR_FRenderTargetPoolHookFunctions,
    pub stereo_hook: *const UEVR_FFakeStereoRenderingHookFunctions,
    pub frhitexture2d: *const UEVR_FRHITexture2DFunctions,
    pub uscriptstruct: *const UEVR_UScriptStructFunctions,
    pub farrayproperty: *const UEVR_FArrayPropertyFunctions,
    pub fboolproperty: *const UEVR_FBoolPropertyFunctions,
    pub fstructproperty: *const UEVR_FStructPropertyFunctions,
    pub fenumproperty: *const UEVR_FEnumPropertyFunctions,
    pub ufield: *const UEVR_UFieldFunctions,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_SDKData"][::std::mem::size_of::<UEVR_SDKData>() - 184usize];
    ["Alignment of UEVR_SDKData"][::std::mem::align_of::<UEVR_SDKData>() - 8usize];
    ["Offset of field: UEVR_SDKData::functions"]
        [::std::mem::offset_of!(UEVR_SDKData, functions) - 0usize];
    ["Offset of field: UEVR_SDKData::callbacks"]
        [::std::mem::offset_of!(UEVR_SDKData, callbacks) - 8usize];
    ["Offset of field: UEVR_SDKData::uobject"]
        [::std::mem::offset_of!(UEVR_SDKData, uobject) - 16usize];
    ["Offset of field: UEVR_SDKData::uobject_array"]
        [::std::mem::offset_of!(UEVR_SDKData, uobject_array) - 24usize];
    ["Offset of field: UEVR_SDKData::ffield"]
        [::std::mem::offset_of!(UEVR_SDKData, ffield) - 32usize];
    ["Offset of field: UEVR_SDKData::fproperty"]
        [::std::mem::offset_of!(UEVR_SDKData, fproperty) - 40usize];
    ["Offset of field: UEVR_SDKData::ustruct"]
        [::std::mem::offset_of!(UEVR_SDKData, ustruct) - 48usize];
    ["Offset of field: UEVR_SDKData::uclass"]
        [::std::mem::offset_of!(UEVR_SDKData, uclass) - 56usize];
    ["Offset of field: UEVR_SDKData::ufunction"]
        [::std::mem::offset_of!(UEVR_SDKData, ufunction) - 64usize];
    ["Offset of field: UEVR_SDKData::uobject_hook"]
        [::std::mem::offset_of!(UEVR_SDKData, uobject_hook) - 72usize];
    ["Offset of field: UEVR_SDKData::ffield_class"]
        [::std::mem::offset_of!(UEVR_SDKData, ffield_class) - 80usize];
    ["Offset of field: UEVR_SDKData::fname"][::std::mem::offset_of!(UEVR_SDKData, fname) - 88usize];
    ["Offset of field: UEVR_SDKData::console"]
        [::std::mem::offset_of!(UEVR_SDKData, console) - 96usize];
    ["Offset of field: UEVR_SDKData::malloc"]
        [::std::mem::offset_of!(UEVR_SDKData, malloc) - 104usize];
    ["Offset of field: UEVR_SDKData::render_target_pool_hook"]
        [::std::mem::offset_of!(UEVR_SDKData, render_target_pool_hook) - 112usize];
    ["Offset of field: UEVR_SDKData::stereo_hook"]
        [::std::mem::offset_of!(UEVR_SDKData, stereo_hook) - 120usize];
    ["Offset of field: UEVR_SDKData::frhitexture2d"]
        [::std::mem::offset_of!(UEVR_SDKData, frhitexture2d) - 128usize];
    ["Offset of field: UEVR_SDKData::uscriptstruct"]
        [::std::mem::offset_of!(UEVR_SDKData, uscriptstruct) - 136usize];
    ["Offset of field: UEVR_SDKData::farrayproperty"]
        [::std::mem::offset_of!(UEVR_SDKData, farrayproperty) - 144usize];
    ["Offset of field: UEVR_SDKData::fboolproperty"]
        [::std::mem::offset_of!(UEVR_SDKData, fboolproperty) - 152usize];
    ["Offset of field: UEVR_SDKData::fstructproperty"]
        [::std::mem::offset_of!(UEVR_SDKData, fstructproperty) - 160usize];
    ["Offset of field: UEVR_SDKData::fenumproperty"]
        [::std::mem::offset_of!(UEVR_SDKData, fenumproperty) - 168usize];
    ["Offset of field: UEVR_SDKData::ufield"]
        [::std::mem::offset_of!(UEVR_SDKData, ufield) - 176usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_IVRSystem__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_IVRSystem__"][::std::mem::size_of::<UEVR_IVRSystem__>() - 4usize];
    ["Alignment of UEVR_IVRSystem__"][::std::mem::align_of::<UEVR_IVRSystem__>() - 4usize];
    ["Offset of field: UEVR_IVRSystem__::unused"]
        [::std::mem::offset_of!(UEVR_IVRSystem__, unused) - 0usize];
};
pub type UEVR_IVRSystem = *mut UEVR_IVRSystem__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_IVRChaperone__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_IVRChaperone__"][::std::mem::size_of::<UEVR_IVRChaperone__>() - 4usize];
    ["Alignment of UEVR_IVRChaperone__"][::std::mem::align_of::<UEVR_IVRChaperone__>() - 4usize];
    ["Offset of field: UEVR_IVRChaperone__::unused"]
        [::std::mem::offset_of!(UEVR_IVRChaperone__, unused) - 0usize];
};
pub type UEVR_IVRChaperone = *mut UEVR_IVRChaperone__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_IVRChaperoneSetup__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_IVRChaperoneSetup__"]
        [::std::mem::size_of::<UEVR_IVRChaperoneSetup__>() - 4usize];
    ["Alignment of UEVR_IVRChaperoneSetup__"]
        [::std::mem::align_of::<UEVR_IVRChaperoneSetup__>() - 4usize];
    ["Offset of field: UEVR_IVRChaperoneSetup__::unused"]
        [::std::mem::offset_of!(UEVR_IVRChaperoneSetup__, unused) - 0usize];
};
pub type UEVR_IVRChaperoneSetup = *mut UEVR_IVRChaperoneSetup__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_IVRCompositor__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_IVRCompositor__"][::std::mem::size_of::<UEVR_IVRCompositor__>() - 4usize];
    ["Alignment of UEVR_IVRCompositor__"][::std::mem::align_of::<UEVR_IVRCompositor__>() - 4usize];
    ["Offset of field: UEVR_IVRCompositor__::unused"]
        [::std::mem::offset_of!(UEVR_IVRCompositor__, unused) - 0usize];
};
pub type UEVR_IVRCompositor = *mut UEVR_IVRCompositor__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_IVROverlay__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_IVROverlay__"][::std::mem::size_of::<UEVR_IVROverlay__>() - 4usize];
    ["Alignment of UEVR_IVROverlay__"][::std::mem::align_of::<UEVR_IVROverlay__>() - 4usize];
    ["Offset of field: UEVR_IVROverlay__::unused"]
        [::std::mem::offset_of!(UEVR_IVROverlay__, unused) - 0usize];
};
pub type UEVR_IVROverlay = *mut UEVR_IVROverlay__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_IVROverlayView__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_IVROverlayView__"][::std::mem::size_of::<UEVR_IVROverlayView__>() - 4usize];
    ["Alignment of UEVR_IVROverlayView__"]
        [::std::mem::align_of::<UEVR_IVROverlayView__>() - 4usize];
    ["Offset of field: UEVR_IVROverlayView__::unused"]
        [::std::mem::offset_of!(UEVR_IVROverlayView__, unused) - 0usize];
};
pub type UEVR_IVROverlayView = *mut UEVR_IVROverlayView__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_IVRHeadsetView__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_IVRHeadsetView__"][::std::mem::size_of::<UEVR_IVRHeadsetView__>() - 4usize];
    ["Alignment of UEVR_IVRHeadsetView__"]
        [::std::mem::align_of::<UEVR_IVRHeadsetView__>() - 4usize];
    ["Offset of field: UEVR_IVRHeadsetView__::unused"]
        [::std::mem::offset_of!(UEVR_IVRHeadsetView__, unused) - 0usize];
};
pub type UEVR_IVRHeadsetView = *mut UEVR_IVRHeadsetView__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_IVRScreenshots__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_IVRScreenshots__"][::std::mem::size_of::<UEVR_IVRScreenshots__>() - 4usize];
    ["Alignment of UEVR_IVRScreenshots__"]
        [::std::mem::align_of::<UEVR_IVRScreenshots__>() - 4usize];
    ["Offset of field: UEVR_IVRScreenshots__::unused"]
        [::std::mem::offset_of!(UEVR_IVRScreenshots__, unused) - 0usize];
};
pub type UEVR_IVRScreenshots = *mut UEVR_IVRScreenshots__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_IVRRenderModels__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_IVRRenderModels__"][::std::mem::size_of::<UEVR_IVRRenderModels__>() - 4usize];
    ["Alignment of UEVR_IVRRenderModels__"]
        [::std::mem::align_of::<UEVR_IVRRenderModels__>() - 4usize];
    ["Offset of field: UEVR_IVRRenderModels__::unused"]
        [::std::mem::offset_of!(UEVR_IVRRenderModels__, unused) - 0usize];
};
pub type UEVR_IVRRenderModels = *mut UEVR_IVRRenderModels__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_IVRApplications__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_IVRApplications__"][::std::mem::size_of::<UEVR_IVRApplications__>() - 4usize];
    ["Alignment of UEVR_IVRApplications__"]
        [::std::mem::align_of::<UEVR_IVRApplications__>() - 4usize];
    ["Offset of field: UEVR_IVRApplications__::unused"]
        [::std::mem::offset_of!(UEVR_IVRApplications__, unused) - 0usize];
};
pub type UEVR_IVRApplications = *mut UEVR_IVRApplications__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_IVRSettings__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_IVRSettings__"][::std::mem::size_of::<UEVR_IVRSettings__>() - 4usize];
    ["Alignment of UEVR_IVRSettings__"][::std::mem::align_of::<UEVR_IVRSettings__>() - 4usize];
    ["Offset of field: UEVR_IVRSettings__::unused"]
        [::std::mem::offset_of!(UEVR_IVRSettings__, unused) - 0usize];
};
pub type UEVR_IVRSettings = *mut UEVR_IVRSettings__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_IVRResources__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_IVRResources__"][::std::mem::size_of::<UEVR_IVRResources__>() - 4usize];
    ["Alignment of UEVR_IVRResources__"][::std::mem::align_of::<UEVR_IVRResources__>() - 4usize];
    ["Offset of field: UEVR_IVRResources__::unused"]
        [::std::mem::offset_of!(UEVR_IVRResources__, unused) - 0usize];
};
pub type UEVR_IVRResources = *mut UEVR_IVRResources__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_IVRExtendedDisplay__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_IVRExtendedDisplay__"]
        [::std::mem::size_of::<UEVR_IVRExtendedDisplay__>() - 4usize];
    ["Alignment of UEVR_IVRExtendedDisplay__"]
        [::std::mem::align_of::<UEVR_IVRExtendedDisplay__>() - 4usize];
    ["Offset of field: UEVR_IVRExtendedDisplay__::unused"]
        [::std::mem::offset_of!(UEVR_IVRExtendedDisplay__, unused) - 0usize];
};
pub type UEVR_IVRExtendedDisplay = *mut UEVR_IVRExtendedDisplay__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_IVRTrackedCamera__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_IVRTrackedCamera__"][::std::mem::size_of::<UEVR_IVRTrackedCamera__>() - 4usize];
    ["Alignment of UEVR_IVRTrackedCamera__"]
        [::std::mem::align_of::<UEVR_IVRTrackedCamera__>() - 4usize];
    ["Offset of field: UEVR_IVRTrackedCamera__::unused"]
        [::std::mem::offset_of!(UEVR_IVRTrackedCamera__, unused) - 0usize];
};
pub type UEVR_IVRTrackedCamera = *mut UEVR_IVRTrackedCamera__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_IVRDriverManager__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_IVRDriverManager__"][::std::mem::size_of::<UEVR_IVRDriverManager__>() - 4usize];
    ["Alignment of UEVR_IVRDriverManager__"]
        [::std::mem::align_of::<UEVR_IVRDriverManager__>() - 4usize];
    ["Offset of field: UEVR_IVRDriverManager__::unused"]
        [::std::mem::offset_of!(UEVR_IVRDriverManager__, unused) - 0usize];
};
pub type UEVR_IVRDriverManager = *mut UEVR_IVRDriverManager__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_IVRInput__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_IVRInput__"][::std::mem::size_of::<UEVR_IVRInput__>() - 4usize];
    ["Alignment of UEVR_IVRInput__"][::std::mem::align_of::<UEVR_IVRInput__>() - 4usize];
    ["Offset of field: UEVR_IVRInput__::unused"]
        [::std::mem::offset_of!(UEVR_IVRInput__, unused) - 0usize];
};
pub type UEVR_IVRInput = *mut UEVR_IVRInput__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_IVRIOBuffer__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_IVRIOBuffer__"][::std::mem::size_of::<UEVR_IVRIOBuffer__>() - 4usize];
    ["Alignment of UEVR_IVRIOBuffer__"][::std::mem::align_of::<UEVR_IVRIOBuffer__>() - 4usize];
    ["Offset of field: UEVR_IVRIOBuffer__::unused"]
        [::std::mem::offset_of!(UEVR_IVRIOBuffer__, unused) - 0usize];
};
pub type UEVR_IVRIOBuffer = *mut UEVR_IVRIOBuffer__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_IVRSpatialAnchors__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_IVRSpatialAnchors__"]
        [::std::mem::size_of::<UEVR_IVRSpatialAnchors__>() - 4usize];
    ["Alignment of UEVR_IVRSpatialAnchors__"]
        [::std::mem::align_of::<UEVR_IVRSpatialAnchors__>() - 4usize];
    ["Offset of field: UEVR_IVRSpatialAnchors__::unused"]
        [::std::mem::offset_of!(UEVR_IVRSpatialAnchors__, unused) - 0usize];
};
pub type UEVR_IVRSpatialAnchors = *mut UEVR_IVRSpatialAnchors__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_IVRNotifications__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_IVRNotifications__"][::std::mem::size_of::<UEVR_IVRNotifications__>() - 4usize];
    ["Alignment of UEVR_IVRNotifications__"]
        [::std::mem::align_of::<UEVR_IVRNotifications__>() - 4usize];
    ["Offset of field: UEVR_IVRNotifications__::unused"]
        [::std::mem::offset_of!(UEVR_IVRNotifications__, unused) - 0usize];
};
pub type UEVR_IVRNotifications = *mut UEVR_IVRNotifications__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_IVRDebug__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_IVRDebug__"][::std::mem::size_of::<UEVR_IVRDebug__>() - 4usize];
    ["Alignment of UEVR_IVRDebug__"][::std::mem::align_of::<UEVR_IVRDebug__>() - 4usize];
    ["Offset of field: UEVR_IVRDebug__::unused"]
        [::std::mem::offset_of!(UEVR_IVRDebug__, unused) - 0usize];
};
pub type UEVR_IVRDebug = *mut UEVR_IVRDebug__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_OpenVRData {
    pub get_vr_system: ::std::option::Option<unsafe extern "C" fn() -> UEVR_IVRSystem>,
    pub get_vr_chaperone: ::std::option::Option<unsafe extern "C" fn() -> UEVR_IVRChaperone>,
    pub get_vr_chaperone_setup:
        ::std::option::Option<unsafe extern "C" fn() -> UEVR_IVRChaperoneSetup>,
    pub get_vr_compositor: ::std::option::Option<unsafe extern "C" fn() -> UEVR_IVRCompositor>,
    pub get_vr_overlay: ::std::option::Option<unsafe extern "C" fn() -> UEVR_IVROverlay>,
    pub get_vr_overlay_view: ::std::option::Option<unsafe extern "C" fn() -> UEVR_IVROverlayView>,
    pub get_vr_headset_view: ::std::option::Option<unsafe extern "C" fn() -> UEVR_IVRHeadsetView>,
    pub get_vr_screenshots: ::std::option::Option<unsafe extern "C" fn() -> UEVR_IVRScreenshots>,
    pub get_vr_render_models: ::std::option::Option<unsafe extern "C" fn() -> UEVR_IVRRenderModels>,
    pub get_vr_applications: ::std::option::Option<unsafe extern "C" fn() -> UEVR_IVRApplications>,
    pub get_vr_settings: ::std::option::Option<unsafe extern "C" fn() -> UEVR_IVRSettings>,
    pub get_vr_resources: ::std::option::Option<unsafe extern "C" fn() -> UEVR_IVRResources>,
    pub get_vr_extended_display:
        ::std::option::Option<unsafe extern "C" fn() -> UEVR_IVRExtendedDisplay>,
    pub get_vr_tracked_camera:
        ::std::option::Option<unsafe extern "C" fn() -> UEVR_IVRTrackedCamera>,
    pub get_vr_driver_manager:
        ::std::option::Option<unsafe extern "C" fn() -> UEVR_IVRDriverManager>,
    pub get_vr_input: ::std::option::Option<unsafe extern "C" fn() -> UEVR_IVRInput>,
    pub get_vr_io_buffer: ::std::option::Option<unsafe extern "C" fn() -> UEVR_IVRIOBuffer>,
    pub get_vr_spatial_anchors:
        ::std::option::Option<unsafe extern "C" fn() -> UEVR_IVRSpatialAnchors>,
    pub get_vr_notifications:
        ::std::option::Option<unsafe extern "C" fn() -> UEVR_IVRNotifications>,
    pub get_vr_debug: ::std::option::Option<unsafe extern "C" fn() -> UEVR_IVRDebug>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_OpenVRData"][::std::mem::size_of::<UEVR_OpenVRData>() - 160usize];
    ["Alignment of UEVR_OpenVRData"][::std::mem::align_of::<UEVR_OpenVRData>() - 8usize];
    ["Offset of field: UEVR_OpenVRData::get_vr_system"]
        [::std::mem::offset_of!(UEVR_OpenVRData, get_vr_system) - 0usize];
    ["Offset of field: UEVR_OpenVRData::get_vr_chaperone"]
        [::std::mem::offset_of!(UEVR_OpenVRData, get_vr_chaperone) - 8usize];
    ["Offset of field: UEVR_OpenVRData::get_vr_chaperone_setup"]
        [::std::mem::offset_of!(UEVR_OpenVRData, get_vr_chaperone_setup) - 16usize];
    ["Offset of field: UEVR_OpenVRData::get_vr_compositor"]
        [::std::mem::offset_of!(UEVR_OpenVRData, get_vr_compositor) - 24usize];
    ["Offset of field: UEVR_OpenVRData::get_vr_overlay"]
        [::std::mem::offset_of!(UEVR_OpenVRData, get_vr_overlay) - 32usize];
    ["Offset of field: UEVR_OpenVRData::get_vr_overlay_view"]
        [::std::mem::offset_of!(UEVR_OpenVRData, get_vr_overlay_view) - 40usize];
    ["Offset of field: UEVR_OpenVRData::get_vr_headset_view"]
        [::std::mem::offset_of!(UEVR_OpenVRData, get_vr_headset_view) - 48usize];
    ["Offset of field: UEVR_OpenVRData::get_vr_screenshots"]
        [::std::mem::offset_of!(UEVR_OpenVRData, get_vr_screenshots) - 56usize];
    ["Offset of field: UEVR_OpenVRData::get_vr_render_models"]
        [::std::mem::offset_of!(UEVR_OpenVRData, get_vr_render_models) - 64usize];
    ["Offset of field: UEVR_OpenVRData::get_vr_applications"]
        [::std::mem::offset_of!(UEVR_OpenVRData, get_vr_applications) - 72usize];
    ["Offset of field: UEVR_OpenVRData::get_vr_settings"]
        [::std::mem::offset_of!(UEVR_OpenVRData, get_vr_settings) - 80usize];
    ["Offset of field: UEVR_OpenVRData::get_vr_resources"]
        [::std::mem::offset_of!(UEVR_OpenVRData, get_vr_resources) - 88usize];
    ["Offset of field: UEVR_OpenVRData::get_vr_extended_display"]
        [::std::mem::offset_of!(UEVR_OpenVRData, get_vr_extended_display) - 96usize];
    ["Offset of field: UEVR_OpenVRData::get_vr_tracked_camera"]
        [::std::mem::offset_of!(UEVR_OpenVRData, get_vr_tracked_camera) - 104usize];
    ["Offset of field: UEVR_OpenVRData::get_vr_driver_manager"]
        [::std::mem::offset_of!(UEVR_OpenVRData, get_vr_driver_manager) - 112usize];
    ["Offset of field: UEVR_OpenVRData::get_vr_input"]
        [::std::mem::offset_of!(UEVR_OpenVRData, get_vr_input) - 120usize];
    ["Offset of field: UEVR_OpenVRData::get_vr_io_buffer"]
        [::std::mem::offset_of!(UEVR_OpenVRData, get_vr_io_buffer) - 128usize];
    ["Offset of field: UEVR_OpenVRData::get_vr_spatial_anchors"]
        [::std::mem::offset_of!(UEVR_OpenVRData, get_vr_spatial_anchors) - 136usize];
    ["Offset of field: UEVR_OpenVRData::get_vr_notifications"]
        [::std::mem::offset_of!(UEVR_OpenVRData, get_vr_notifications) - 144usize];
    ["Offset of field: UEVR_OpenVRData::get_vr_debug"]
        [::std::mem::offset_of!(UEVR_OpenVRData, get_vr_debug) - 152usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_OpenXRData {
    pub get_xr_instance: ::std::option::Option<unsafe extern "C" fn() -> UEVR_XrInstance>,
    pub get_xr_session: ::std::option::Option<unsafe extern "C" fn() -> UEVR_XrSession>,
    pub get_stage_space: ::std::option::Option<unsafe extern "C" fn() -> UEVR_XrSpace>,
    pub get_view_space: ::std::option::Option<unsafe extern "C" fn() -> UEVR_XrSpace>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_OpenXRData"][::std::mem::size_of::<UEVR_OpenXRData>() - 32usize];
    ["Alignment of UEVR_OpenXRData"][::std::mem::align_of::<UEVR_OpenXRData>() - 8usize];
    ["Offset of field: UEVR_OpenXRData::get_xr_instance"]
        [::std::mem::offset_of!(UEVR_OpenXRData, get_xr_instance) - 0usize];
    ["Offset of field: UEVR_OpenXRData::get_xr_session"]
        [::std::mem::offset_of!(UEVR_OpenXRData, get_xr_session) - 8usize];
    ["Offset of field: UEVR_OpenXRData::get_stage_space"]
        [::std::mem::offset_of!(UEVR_OpenXRData, get_stage_space) - 16usize];
    ["Offset of field: UEVR_OpenXRData::get_view_space"]
        [::std::mem::offset_of!(UEVR_OpenXRData, get_view_space) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_ActionHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_ActionHandle__"][::std::mem::size_of::<UEVR_ActionHandle__>() - 4usize];
    ["Alignment of UEVR_ActionHandle__"][::std::mem::align_of::<UEVR_ActionHandle__>() - 4usize];
    ["Offset of field: UEVR_ActionHandle__::unused"]
        [::std::mem::offset_of!(UEVR_ActionHandle__, unused) - 0usize];
};
pub type UEVR_ActionHandle = *mut UEVR_ActionHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_InputSourceHandle__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_InputSourceHandle__"]
        [::std::mem::size_of::<UEVR_InputSourceHandle__>() - 4usize];
    ["Alignment of UEVR_InputSourceHandle__"]
        [::std::mem::align_of::<UEVR_InputSourceHandle__>() - 4usize];
    ["Offset of field: UEVR_InputSourceHandle__::unused"]
        [::std::mem::offset_of!(UEVR_InputSourceHandle__, unused) - 0usize];
};
pub type UEVR_InputSourceHandle = *mut UEVR_InputSourceHandle__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_VRData {
    pub is_runtime_ready: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub is_openvr: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub is_openxr: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub is_hmd_active: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub get_standing_origin:
        ::std::option::Option<unsafe extern "C" fn(out_origin: *mut UEVR_Vector3f)>,
    pub get_rotation_offset:
        ::std::option::Option<unsafe extern "C" fn(out_rotation: *mut UEVR_Quaternionf)>,
    pub set_standing_origin:
        ::std::option::Option<unsafe extern "C" fn(origin: *const UEVR_Vector3f)>,
    pub set_rotation_offset:
        ::std::option::Option<unsafe extern "C" fn(rotation: *const UEVR_Quaternionf)>,
    pub get_hmd_index: ::std::option::Option<unsafe extern "C" fn() -> UEVR_TrackedDeviceIndex>,
    pub get_left_controller_index:
        ::std::option::Option<unsafe extern "C" fn() -> UEVR_TrackedDeviceIndex>,
    pub get_right_controller_index:
        ::std::option::Option<unsafe extern "C" fn() -> UEVR_TrackedDeviceIndex>,
    pub get_pose: ::std::option::Option<
        unsafe extern "C" fn(
            index: UEVR_TrackedDeviceIndex,
            out_position: *mut UEVR_Vector3f,
            out_rotation: *mut UEVR_Quaternionf,
        ),
    >,
    pub get_transform: ::std::option::Option<
        unsafe extern "C" fn(index: UEVR_TrackedDeviceIndex, out_transform: *mut UEVR_Matrix4x4f),
    >,
    pub get_grip_pose: ::std::option::Option<
        unsafe extern "C" fn(
            index: UEVR_TrackedDeviceIndex,
            out_position: *mut UEVR_Vector3f,
            out_rotation: *mut UEVR_Quaternionf,
        ),
    >,
    pub get_aim_pose: ::std::option::Option<
        unsafe extern "C" fn(
            index: UEVR_TrackedDeviceIndex,
            out_position: *mut UEVR_Vector3f,
            out_rotation: *mut UEVR_Quaternionf,
        ),
    >,
    pub get_grip_transform: ::std::option::Option<
        unsafe extern "C" fn(index: UEVR_TrackedDeviceIndex, out_transform: *mut UEVR_Matrix4x4f),
    >,
    pub get_aim_transform: ::std::option::Option<
        unsafe extern "C" fn(index: UEVR_TrackedDeviceIndex, out_transform: *mut UEVR_Matrix4x4f),
    >,
    pub get_eye_offset: ::std::option::Option<
        unsafe extern "C" fn(eye: UEVR_Eye, out_position: *mut UEVR_Vector3f),
    >,
    pub get_ue_projection_matrix: ::std::option::Option<
        unsafe extern "C" fn(eye: UEVR_Eye, out_projection: *mut UEVR_Matrix4x4f),
    >,
    pub get_left_joystick_source:
        ::std::option::Option<unsafe extern "C" fn() -> UEVR_InputSourceHandle>,
    pub get_right_joystick_source:
        ::std::option::Option<unsafe extern "C" fn() -> UEVR_InputSourceHandle>,
    pub get_action_handle: ::std::option::Option<
        unsafe extern "C" fn(action_path: *const ::std::os::raw::c_char) -> UEVR_ActionHandle,
    >,
    pub is_action_active: ::std::option::Option<
        unsafe extern "C" fn(action: UEVR_ActionHandle, source: UEVR_InputSourceHandle) -> bool,
    >,
    pub is_action_active_any_joystick:
        ::std::option::Option<unsafe extern "C" fn(action: UEVR_ActionHandle) -> bool>,
    pub get_joystick_axis: ::std::option::Option<
        unsafe extern "C" fn(source: UEVR_InputSourceHandle, out_axis: *mut UEVR_Vector2f),
    >,
    pub trigger_haptic_vibration: ::std::option::Option<
        unsafe extern "C" fn(
            seconds_from_now: f32,
            duration: f32,
            frequency: f32,
            amplitude: f32,
            source: UEVR_InputSourceHandle,
        ),
    >,
    pub is_using_controllers: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub is_decoupled_pitch_enabled: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub get_movement_orientation:
        ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_uint>,
    pub get_lowest_xinput_index:
        ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_uint>,
    pub recenter_view: ::std::option::Option<unsafe extern "C" fn()>,
    pub recenter_horizon: ::std::option::Option<unsafe extern "C" fn()>,
    pub get_aim_method: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_uint>,
    pub set_aim_method: ::std::option::Option<unsafe extern "C" fn(method: ::std::os::raw::c_uint)>,
    pub is_aim_allowed: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub set_aim_allowed: ::std::option::Option<unsafe extern "C" fn(allowed: bool)>,
    pub get_hmd_width: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_uint>,
    pub get_hmd_height: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_uint>,
    pub get_ui_width: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_uint>,
    pub get_ui_height: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_uint>,
    pub is_snap_turn_enabled: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub set_snap_turn_enabled: ::std::option::Option<unsafe extern "C" fn(enabled: bool)>,
    pub set_decoupled_pitch_enabled: ::std::option::Option<unsafe extern "C" fn(enabled: bool)>,
    pub set_mod_value: ::std::option::Option<
        unsafe extern "C" fn(
            key: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ),
    >,
    pub get_mod_value: ::std::option::Option<
        unsafe extern "C" fn(
            key: *const ::std::os::raw::c_char,
            value: *mut ::std::os::raw::c_char,
            value_size: ::std::os::raw::c_uint,
        ),
    >,
    pub save_config: ::std::option::Option<unsafe extern "C" fn()>,
    pub reload_config: ::std::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_VRData"][::std::mem::size_of::<UEVR_VRData>() - 376usize];
    ["Alignment of UEVR_VRData"][::std::mem::align_of::<UEVR_VRData>() - 8usize];
    ["Offset of field: UEVR_VRData::is_runtime_ready"]
        [::std::mem::offset_of!(UEVR_VRData, is_runtime_ready) - 0usize];
    ["Offset of field: UEVR_VRData::is_openvr"]
        [::std::mem::offset_of!(UEVR_VRData, is_openvr) - 8usize];
    ["Offset of field: UEVR_VRData::is_openxr"]
        [::std::mem::offset_of!(UEVR_VRData, is_openxr) - 16usize];
    ["Offset of field: UEVR_VRData::is_hmd_active"]
        [::std::mem::offset_of!(UEVR_VRData, is_hmd_active) - 24usize];
    ["Offset of field: UEVR_VRData::get_standing_origin"]
        [::std::mem::offset_of!(UEVR_VRData, get_standing_origin) - 32usize];
    ["Offset of field: UEVR_VRData::get_rotation_offset"]
        [::std::mem::offset_of!(UEVR_VRData, get_rotation_offset) - 40usize];
    ["Offset of field: UEVR_VRData::set_standing_origin"]
        [::std::mem::offset_of!(UEVR_VRData, set_standing_origin) - 48usize];
    ["Offset of field: UEVR_VRData::set_rotation_offset"]
        [::std::mem::offset_of!(UEVR_VRData, set_rotation_offset) - 56usize];
    ["Offset of field: UEVR_VRData::get_hmd_index"]
        [::std::mem::offset_of!(UEVR_VRData, get_hmd_index) - 64usize];
    ["Offset of field: UEVR_VRData::get_left_controller_index"]
        [::std::mem::offset_of!(UEVR_VRData, get_left_controller_index) - 72usize];
    ["Offset of field: UEVR_VRData::get_right_controller_index"]
        [::std::mem::offset_of!(UEVR_VRData, get_right_controller_index) - 80usize];
    ["Offset of field: UEVR_VRData::get_pose"]
        [::std::mem::offset_of!(UEVR_VRData, get_pose) - 88usize];
    ["Offset of field: UEVR_VRData::get_transform"]
        [::std::mem::offset_of!(UEVR_VRData, get_transform) - 96usize];
    ["Offset of field: UEVR_VRData::get_grip_pose"]
        [::std::mem::offset_of!(UEVR_VRData, get_grip_pose) - 104usize];
    ["Offset of field: UEVR_VRData::get_aim_pose"]
        [::std::mem::offset_of!(UEVR_VRData, get_aim_pose) - 112usize];
    ["Offset of field: UEVR_VRData::get_grip_transform"]
        [::std::mem::offset_of!(UEVR_VRData, get_grip_transform) - 120usize];
    ["Offset of field: UEVR_VRData::get_aim_transform"]
        [::std::mem::offset_of!(UEVR_VRData, get_aim_transform) - 128usize];
    ["Offset of field: UEVR_VRData::get_eye_offset"]
        [::std::mem::offset_of!(UEVR_VRData, get_eye_offset) - 136usize];
    ["Offset of field: UEVR_VRData::get_ue_projection_matrix"]
        [::std::mem::offset_of!(UEVR_VRData, get_ue_projection_matrix) - 144usize];
    ["Offset of field: UEVR_VRData::get_left_joystick_source"]
        [::std::mem::offset_of!(UEVR_VRData, get_left_joystick_source) - 152usize];
    ["Offset of field: UEVR_VRData::get_right_joystick_source"]
        [::std::mem::offset_of!(UEVR_VRData, get_right_joystick_source) - 160usize];
    ["Offset of field: UEVR_VRData::get_action_handle"]
        [::std::mem::offset_of!(UEVR_VRData, get_action_handle) - 168usize];
    ["Offset of field: UEVR_VRData::is_action_active"]
        [::std::mem::offset_of!(UEVR_VRData, is_action_active) - 176usize];
    ["Offset of field: UEVR_VRData::is_action_active_any_joystick"]
        [::std::mem::offset_of!(UEVR_VRData, is_action_active_any_joystick) - 184usize];
    ["Offset of field: UEVR_VRData::get_joystick_axis"]
        [::std::mem::offset_of!(UEVR_VRData, get_joystick_axis) - 192usize];
    ["Offset of field: UEVR_VRData::trigger_haptic_vibration"]
        [::std::mem::offset_of!(UEVR_VRData, trigger_haptic_vibration) - 200usize];
    ["Offset of field: UEVR_VRData::is_using_controllers"]
        [::std::mem::offset_of!(UEVR_VRData, is_using_controllers) - 208usize];
    ["Offset of field: UEVR_VRData::is_decoupled_pitch_enabled"]
        [::std::mem::offset_of!(UEVR_VRData, is_decoupled_pitch_enabled) - 216usize];
    ["Offset of field: UEVR_VRData::get_movement_orientation"]
        [::std::mem::offset_of!(UEVR_VRData, get_movement_orientation) - 224usize];
    ["Offset of field: UEVR_VRData::get_lowest_xinput_index"]
        [::std::mem::offset_of!(UEVR_VRData, get_lowest_xinput_index) - 232usize];
    ["Offset of field: UEVR_VRData::recenter_view"]
        [::std::mem::offset_of!(UEVR_VRData, recenter_view) - 240usize];
    ["Offset of field: UEVR_VRData::recenter_horizon"]
        [::std::mem::offset_of!(UEVR_VRData, recenter_horizon) - 248usize];
    ["Offset of field: UEVR_VRData::get_aim_method"]
        [::std::mem::offset_of!(UEVR_VRData, get_aim_method) - 256usize];
    ["Offset of field: UEVR_VRData::set_aim_method"]
        [::std::mem::offset_of!(UEVR_VRData, set_aim_method) - 264usize];
    ["Offset of field: UEVR_VRData::is_aim_allowed"]
        [::std::mem::offset_of!(UEVR_VRData, is_aim_allowed) - 272usize];
    ["Offset of field: UEVR_VRData::set_aim_allowed"]
        [::std::mem::offset_of!(UEVR_VRData, set_aim_allowed) - 280usize];
    ["Offset of field: UEVR_VRData::get_hmd_width"]
        [::std::mem::offset_of!(UEVR_VRData, get_hmd_width) - 288usize];
    ["Offset of field: UEVR_VRData::get_hmd_height"]
        [::std::mem::offset_of!(UEVR_VRData, get_hmd_height) - 296usize];
    ["Offset of field: UEVR_VRData::get_ui_width"]
        [::std::mem::offset_of!(UEVR_VRData, get_ui_width) - 304usize];
    ["Offset of field: UEVR_VRData::get_ui_height"]
        [::std::mem::offset_of!(UEVR_VRData, get_ui_height) - 312usize];
    ["Offset of field: UEVR_VRData::is_snap_turn_enabled"]
        [::std::mem::offset_of!(UEVR_VRData, is_snap_turn_enabled) - 320usize];
    ["Offset of field: UEVR_VRData::set_snap_turn_enabled"]
        [::std::mem::offset_of!(UEVR_VRData, set_snap_turn_enabled) - 328usize];
    ["Offset of field: UEVR_VRData::set_decoupled_pitch_enabled"]
        [::std::mem::offset_of!(UEVR_VRData, set_decoupled_pitch_enabled) - 336usize];
    ["Offset of field: UEVR_VRData::set_mod_value"]
        [::std::mem::offset_of!(UEVR_VRData, set_mod_value) - 344usize];
    ["Offset of field: UEVR_VRData::get_mod_value"]
        [::std::mem::offset_of!(UEVR_VRData, get_mod_value) - 352usize];
    ["Offset of field: UEVR_VRData::save_config"]
        [::std::mem::offset_of!(UEVR_VRData, save_config) - 360usize];
    ["Offset of field: UEVR_VRData::reload_config"]
        [::std::mem::offset_of!(UEVR_VRData, reload_config) - 368usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEVR_PluginInitializeParam {
    pub uevr_module: *mut ::std::os::raw::c_void,
    pub version: *const UEVR_PluginVersion,
    pub functions: *const UEVR_PluginFunctions,
    pub callbacks: *const UEVR_PluginCallbacks,
    pub renderer: *const UEVR_RendererData,
    pub vr: *const UEVR_VRData,
    pub openvr: *const UEVR_OpenVRData,
    pub openxr: *const UEVR_OpenXRData,
    pub sdk: *const UEVR_SDKData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEVR_PluginInitializeParam"]
        [::std::mem::size_of::<UEVR_PluginInitializeParam>() - 72usize];
    ["Alignment of UEVR_PluginInitializeParam"]
        [::std::mem::align_of::<UEVR_PluginInitializeParam>() - 8usize];
    ["Offset of field: UEVR_PluginInitializeParam::uevr_module"]
        [::std::mem::offset_of!(UEVR_PluginInitializeParam, uevr_module) - 0usize];
    ["Offset of field: UEVR_PluginInitializeParam::version"]
        [::std::mem::offset_of!(UEVR_PluginInitializeParam, version) - 8usize];
    ["Offset of field: UEVR_PluginInitializeParam::functions"]
        [::std::mem::offset_of!(UEVR_PluginInitializeParam, functions) - 16usize];
    ["Offset of field: UEVR_PluginInitializeParam::callbacks"]
        [::std::mem::offset_of!(UEVR_PluginInitializeParam, callbacks) - 24usize];
    ["Offset of field: UEVR_PluginInitializeParam::renderer"]
        [::std::mem::offset_of!(UEVR_PluginInitializeParam, renderer) - 32usize];
    ["Offset of field: UEVR_PluginInitializeParam::vr"]
        [::std::mem::offset_of!(UEVR_PluginInitializeParam, vr) - 40usize];
    ["Offset of field: UEVR_PluginInitializeParam::openvr"]
        [::std::mem::offset_of!(UEVR_PluginInitializeParam, openvr) - 48usize];
    ["Offset of field: UEVR_PluginInitializeParam::openxr"]
        [::std::mem::offset_of!(UEVR_PluginInitializeParam, openxr) - 56usize];
    ["Offset of field: UEVR_PluginInitializeParam::sdk"]
        [::std::mem::offset_of!(UEVR_PluginInitializeParam, sdk) - 64usize];
};
pub type UEVR_PluginInitializeFn =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const UEVR_PluginInitializeParam) -> bool>;
